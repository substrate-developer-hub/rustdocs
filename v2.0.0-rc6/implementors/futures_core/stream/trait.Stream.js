(function() {var implementors = {};
implementors["async_channel"] = [{"text":"impl&lt;T&gt; <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"async_channel/struct.Receiver.html\" title=\"struct async_channel::Receiver\">Receiver</a>&lt;T&gt;","synthetic":false,"types":["async_channel::Receiver"]}];
implementors["blocking"] = [{"text":"impl&lt;T:&nbsp;<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static&gt; <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"blocking/struct.Unblock.html\" title=\"struct blocking::Unblock\">Unblock</a>&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T::<a class=\"type\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\" title=\"type core::iter::traits::iterator::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,&nbsp;</span>","synthetic":false,"types":["blocking::Unblock"]}];
implementors["futures_channel"] = [{"text":"impl&lt;T&gt; <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"futures_channel/mpsc/struct.Receiver.html\" title=\"struct futures_channel::mpsc::Receiver\">Receiver</a>&lt;T&gt;","synthetic":false,"types":["futures_channel::mpsc::Receiver"]},{"text":"impl&lt;T&gt; <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"futures_channel/mpsc/struct.UnboundedReceiver.html\" title=\"struct futures_channel::mpsc::UnboundedReceiver\">UnboundedReceiver</a>&lt;T&gt;","synthetic":false,"types":["futures_channel::mpsc::UnboundedReceiver"]}];
implementors["futures_codec"] = [{"text":"impl&lt;T, U&gt; <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"futures_codec/struct.Framed.html\" title=\"struct futures_codec::Framed\">Framed</a>&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: <a class=\"trait\" href=\"futures_io/if_std/trait.AsyncRead.html\" title=\"trait futures_io::if_std::AsyncRead\">AsyncRead</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Unpin.html\" title=\"trait core::marker::Unpin\">Unpin</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: <a class=\"trait\" href=\"futures_codec/trait.Decoder.html\" title=\"trait futures_codec::Decoder\">Decoder</a>,&nbsp;</span>","synthetic":false,"types":["futures_codec::framed::Framed"]},{"text":"impl&lt;T, D&gt; <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"futures_codec/struct.FramedRead.html\" title=\"struct futures_codec::FramedRead\">FramedRead</a>&lt;T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: <a class=\"trait\" href=\"futures_io/if_std/trait.AsyncRead.html\" title=\"trait futures_io::if_std::AsyncRead\">AsyncRead</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Unpin.html\" title=\"trait core::marker::Unpin\">Unpin</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: <a class=\"trait\" href=\"futures_codec/trait.Decoder.html\" title=\"trait futures_codec::Decoder\">Decoder</a>,&nbsp;</span>","synthetic":false,"types":["futures_codec::framed_read::FramedRead"]}];
implementors["futures_core"] = [];
implementors["futures_lite"] = [{"text":"impl&lt;R:&nbsp;<a class=\"trait\" href=\"futures_io/if_std/trait.AsyncBufRead.html\" title=\"trait futures_io::if_std::AsyncBufRead\">AsyncBufRead</a>&gt; <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"futures_lite/io/struct.Lines.html\" title=\"struct futures_lite::io::Lines\">Lines</a>&lt;R&gt;","synthetic":false,"types":["futures_lite::io::Lines"]},{"text":"impl&lt;R:&nbsp;<a class=\"trait\" href=\"futures_io/if_std/trait.AsyncBufRead.html\" title=\"trait futures_io::if_std::AsyncBufRead\">AsyncBufRead</a>&gt; <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"futures_lite/io/struct.Split.html\" title=\"struct futures_lite::io::Split\">Split</a>&lt;R&gt;","synthetic":false,"types":["futures_lite::io::Split"]},{"text":"impl&lt;T:&nbsp;<a class=\"trait\" href=\"futures_io/if_std/trait.AsyncRead.html\" title=\"trait futures_io::if_std::AsyncRead\">AsyncRead</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Unpin.html\" title=\"trait core::marker::Unpin\">Unpin</a>&gt; <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"futures_lite/io/struct.Bytes.html\" title=\"struct futures_lite::io::Bytes\">Bytes</a>&lt;T&gt;","synthetic":false,"types":["futures_lite::io::Bytes"]},{"text":"impl&lt;T&gt; <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"futures_lite/stream/struct.Empty.html\" title=\"struct futures_lite::stream::Empty\">Empty</a>&lt;T&gt;","synthetic":false,"types":["futures_lite::stream::Empty"]},{"text":"impl&lt;I:&nbsp;<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&gt; <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"futures_lite/stream/struct.Iter.html\" title=\"struct futures_lite::stream::Iter\">Iter</a>&lt;I&gt;","synthetic":false,"types":["futures_lite::stream::Iter"]},{"text":"impl&lt;T&gt; <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"futures_lite/stream/struct.Once.html\" title=\"struct futures_lite::stream::Once\">Once</a>&lt;T&gt;","synthetic":false,"types":["futures_lite::stream::Once"]},{"text":"impl&lt;T&gt; <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"futures_lite/stream/struct.Pending.html\" title=\"struct futures_lite::stream::Pending\">Pending</a>&lt;T&gt;","synthetic":false,"types":["futures_lite::stream::Pending"]},{"text":"impl&lt;T, F&gt; <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"futures_lite/stream/struct.PollFn.html\" title=\"struct futures_lite::stream::PollFn\">PollFn</a>&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(&amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;,&nbsp;</span>","synthetic":false,"types":["futures_lite::stream::PollFn"]},{"text":"impl&lt;T:&nbsp;<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"futures_lite/stream/struct.Repeat.html\" title=\"struct futures_lite::stream::Repeat\">Repeat</a>&lt;T&gt;","synthetic":false,"types":["futures_lite::stream::Repeat"]},{"text":"impl&lt;T, F&gt; <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"futures_lite/stream/struct.RepeatWith.html\" title=\"struct futures_lite::stream::RepeatWith\">RepeatWith</a>&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>() -&gt; T,&nbsp;</span>","synthetic":false,"types":["futures_lite::stream::RepeatWith"]},{"text":"impl&lt;T, F, Fut, Item&gt; <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"futures_lite/stream/struct.Unfold.html\" title=\"struct futures_lite::stream::Unfold\">Unfold</a>&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(T) -&gt; Fut,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(</a>Item, T<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">)</a>&gt;&gt;,&nbsp;</span>","synthetic":false,"types":["futures_lite::stream::Unfold"]},{"text":"impl&lt;T, E, F, Fut, Item&gt; <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"futures_lite/stream/struct.TryUnfold.html\" title=\"struct futures_lite::stream::TryUnfold\">TryUnfold</a>&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(T) -&gt; Fut,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(</a>Item, T<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">)</a>&gt;, E&gt;&gt;,&nbsp;</span>","synthetic":false,"types":["futures_lite::stream::TryUnfold"]}];
implementors["gloo_timers"] = [{"text":"impl <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"gloo_timers/future/struct.IntervalStream.html\" title=\"struct gloo_timers::future::IntervalStream\">IntervalStream</a>","synthetic":false,"types":["gloo_timers::future::IntervalStream"]}];
implementors["hyper"] = [{"text":"impl <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"hyper/struct.Body.html\" title=\"struct hyper::Body\">Body</a>","synthetic":false,"types":["hyper::body::body::Body"]}];
implementors["intervalier"] = [{"text":"impl <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"intervalier/struct.ManualSignalInterval.html\" title=\"struct intervalier::ManualSignalInterval\">ManualSignalInterval</a>","synthetic":false,"types":["intervalier::ManualSignalInterval"]}];
implementors["libp2p"] = [{"text":"impl&lt;TInner, TConn, TErr&gt; <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"libp2p/bandwidth/struct.BandwidthListener.html\" title=\"struct libp2p::bandwidth::BandwidthListener\">BandwidthListener</a>&lt;TInner&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TInner: <a class=\"trait\" href=\"futures_core/stream/trait.TryStream.html\" title=\"trait futures_core::stream::TryStream\">TryStream</a>&lt;Ok = <a class=\"enum\" href=\"libp2p/core/transport/enum.ListenerEvent.html\" title=\"enum libp2p::core::transport::ListenerEvent\">ListenerEvent</a>&lt;TConn, TErr&gt;, Error = TErr&gt;,&nbsp;</span>","synthetic":false,"types":["libp2p::bandwidth::BandwidthListener"]}];
implementors["libp2p_core"] = [{"text":"impl&lt;TTrans&gt; <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"libp2p_core/connection/struct.ListenersStream.html\" title=\"struct libp2p_core::connection::ListenersStream\">ListenersStream</a>&lt;TTrans&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TTrans: <a class=\"trait\" href=\"libp2p_core/transport/trait.Transport.html\" title=\"trait libp2p_core::transport::Transport\">Transport</a>,&nbsp;</span>","synthetic":false,"types":["libp2p_core::connection::listeners::ListenersStream"]},{"text":"impl&lt;A, B, I&gt; <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"enum\" href=\"libp2p_core/either/enum.EitherOutput.html\" title=\"enum libp2p_core::either::EitherOutput\">EitherOutput</a>&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: <a class=\"trait\" href=\"futures_core/stream/trait.TryStream.html\" title=\"trait futures_core::stream::TryStream\">TryStream</a>&lt;Ok = I&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: <a class=\"trait\" href=\"futures_core/stream/trait.TryStream.html\" title=\"trait futures_core::stream::TryStream\">TryStream</a>&lt;Ok = I&gt;,&nbsp;</span>","synthetic":false,"types":["libp2p_core::either::EitherOutput"]},{"text":"impl&lt;AStream, BStream, AInner, BInner, AError, BError&gt; <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"enum\" href=\"libp2p_core/either/enum.EitherListenStream.html\" title=\"enum libp2p_core::either::EitherListenStream\">EitherListenStream</a>&lt;AStream, BStream&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AStream: <a class=\"trait\" href=\"futures_core/stream/trait.TryStream.html\" title=\"trait futures_core::stream::TryStream\">TryStream</a>&lt;Ok = <a class=\"enum\" href=\"libp2p_core/transport/enum.ListenerEvent.html\" title=\"enum libp2p_core::transport::ListenerEvent\">ListenerEvent</a>&lt;AInner, AError&gt;, Error = AError&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;BStream: <a class=\"trait\" href=\"futures_core/stream/trait.TryStream.html\" title=\"trait futures_core::stream::TryStream\">TryStream</a>&lt;Ok = <a class=\"enum\" href=\"libp2p_core/transport/enum.ListenerEvent.html\" title=\"enum libp2p_core::transport::ListenerEvent\">ListenerEvent</a>&lt;BInner, BError&gt;, Error = BError&gt;,&nbsp;</span>","synthetic":false,"types":["libp2p_core::either::EitherListenStream"]},{"text":"impl&lt;TListener, TMap, TTransOut, TMapOut, TListUpgr, TTransErr&gt; <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"libp2p_core/transport/and_then/struct.AndThenStream.html\" title=\"struct libp2p_core::transport::and_then::AndThenStream\">AndThenStream</a>&lt;TListener, TMap&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TListener: <a class=\"trait\" href=\"futures_core/stream/trait.TryStream.html\" title=\"trait futures_core::stream::TryStream\">TryStream</a>&lt;Ok = <a class=\"enum\" href=\"libp2p_core/transport/enum.ListenerEvent.html\" title=\"enum libp2p_core::transport::ListenerEvent\">ListenerEvent</a>&lt;TListUpgr, TTransErr&gt;, Error = TTransErr&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;TListUpgr: <a class=\"trait\" href=\"futures_core/future/trait.TryFuture.html\" title=\"trait futures_core::future::TryFuture\">TryFuture</a>&lt;Ok = TTransOut, Error = TTransErr&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;TMap: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(TTransOut, <a class=\"enum\" href=\"libp2p_core/connection/enum.ConnectedPoint.html\" title=\"enum libp2p_core::connection::ConnectedPoint\">ConnectedPoint</a>) -&gt; TMapOut + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;TMapOut: <a class=\"trait\" href=\"futures_core/future/trait.TryFuture.html\" title=\"trait futures_core::future::TryFuture\">TryFuture</a>,&nbsp;</span>","synthetic":false,"types":["libp2p_core::transport::and_then::AndThenStream"]},{"text":"impl&lt;T, F, A, B, X, E&gt; <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"libp2p_core/transport/map/struct.MapStream.html\" title=\"struct libp2p_core::transport::map::MapStream\">MapStream</a>&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: <a class=\"trait\" href=\"futures_core/stream/trait.TryStream.html\" title=\"trait futures_core::stream::TryStream\">TryStream</a>&lt;Ok = <a class=\"enum\" href=\"libp2p_core/transport/enum.ListenerEvent.html\" title=\"enum libp2p_core::transport::ListenerEvent\">ListenerEvent</a>&lt;X, E&gt;, Error = E&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;X: <a class=\"trait\" href=\"futures_core/future/trait.TryFuture.html\" title=\"trait futures_core::future::TryFuture\">TryFuture</a>&lt;Ok = A&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(A, <a class=\"enum\" href=\"libp2p_core/connection/enum.ConnectedPoint.html\" title=\"enum libp2p_core::connection::ConnectedPoint\">ConnectedPoint</a>) -&gt; B + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,&nbsp;</span>","synthetic":false,"types":["libp2p_core::transport::map::MapStream"]},{"text":"impl&lt;T, F, TErr&gt; <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"libp2p_core/transport/map_err/struct.MapErrListener.html\" title=\"struct libp2p_core::transport::map_err::MapErrListener\">MapErrListener</a>&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: <a class=\"trait\" href=\"libp2p_core/transport/trait.Transport.html\" title=\"trait libp2p_core::transport::Transport\">Transport</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T::<a class=\"type\" href=\"libp2p_core/transport/trait.Transport.html#associatedtype.Error\" title=\"type libp2p_core::transport::Transport::Error\">Error</a>) -&gt; TErr + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;TErr: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/error/trait.Error.html\" title=\"trait std::error::Error\">Error</a>,&nbsp;</span>","synthetic":false,"types":["libp2p_core::transport::map_err::MapErrListener"]},{"text":"impl <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"libp2p_core/transport/memory/struct.Listener.html\" title=\"struct libp2p_core::transport::memory::Listener\">Listener</a>","synthetic":false,"types":["libp2p_core::transport::memory::Listener"]},{"text":"impl&lt;T&gt; <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"libp2p_core/transport/memory/struct.Chan.html\" title=\"struct libp2p_core::transport::memory::Chan\">Chan</a>&lt;T&gt;","synthetic":false,"types":["libp2p_core::transport::memory::Chan"]},{"text":"impl&lt;InnerStream, O, E&gt; <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"libp2p_core/transport/timeout/struct.TimeoutListener.html\" title=\"struct libp2p_core::transport::timeout::TimeoutListener\">TimeoutListener</a>&lt;InnerStream&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;InnerStream: <a class=\"trait\" href=\"futures_core/stream/trait.TryStream.html\" title=\"trait futures_core::stream::TryStream\">TryStream</a>&lt;Ok = <a class=\"enum\" href=\"libp2p_core/transport/enum.ListenerEvent.html\" title=\"enum libp2p_core::transport::ListenerEvent\">ListenerEvent</a>&lt;O, E&gt;, Error = E&gt;,&nbsp;</span>","synthetic":false,"types":["libp2p_core::transport::timeout::TimeoutListener"]},{"text":"impl&lt;S, U, F, I, C, D, E&gt; <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"libp2p_core/transport/upgrade/struct.ListenerStream.html\" title=\"struct libp2p_core::transport::upgrade::ListenerStream\">ListenerStream</a>&lt;S, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: <a class=\"trait\" href=\"futures_core/stream/trait.TryStream.html\" title=\"trait futures_core::stream::TryStream\">TryStream</a>&lt;Ok = <a class=\"enum\" href=\"libp2p_core/transport/enum.ListenerEvent.html\" title=\"enum libp2p_core::transport::ListenerEvent\">ListenerEvent</a>&lt;F, E&gt;, Error = E&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: <a class=\"trait\" href=\"futures_core/future/trait.TryFuture.html\" title=\"trait futures_core::future::TryFuture\">TryFuture</a>&lt;Ok = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(</a>I, C<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">)</a>&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: <a class=\"trait\" href=\"futures_io/if_std/trait.AsyncRead.html\" title=\"trait futures_io::if_std::AsyncRead\">AsyncRead</a> + <a class=\"trait\" href=\"futures_io/if_std/trait.AsyncWrite.html\" title=\"trait futures_io::if_std::AsyncWrite\">AsyncWrite</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Unpin.html\" title=\"trait core::marker::Unpin\">Unpin</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: <a class=\"trait\" href=\"libp2p_core/upgrade/trait.InboundUpgrade.html\" title=\"trait libp2p_core::upgrade::InboundUpgrade\">InboundUpgrade</a>&lt;<a class=\"type\" href=\"libp2p_core/type.Negotiated.html\" title=\"type libp2p_core::Negotiated\">Negotiated</a>&lt;C&gt;, Output = D&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,&nbsp;</span>","synthetic":false,"types":["libp2p_core::transport::upgrade::ListenerStream"]}];
implementors["libp2p_plaintext"] = [{"text":"impl&lt;S&gt; <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"libp2p_plaintext/struct.PlainTextMiddleware.html\" title=\"struct libp2p_plaintext::PlainTextMiddleware\">PlainTextMiddleware</a>&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: <a class=\"trait\" href=\"futures_io/if_std/trait.AsyncRead.html\" title=\"trait futures_io::if_std::AsyncRead\">AsyncRead</a> + <a class=\"trait\" href=\"futures_io/if_std/trait.AsyncWrite.html\" title=\"trait futures_io::if_std::AsyncWrite\">AsyncWrite</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Unpin.html\" title=\"trait core::marker::Unpin\">Unpin</a>,&nbsp;</span>","synthetic":false,"types":["libp2p_plaintext::PlainTextMiddleware"]}];
implementors["libp2p_secio"] = [{"text":"impl&lt;S&gt; <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"libp2p_secio/struct.SecioMiddleware.html\" title=\"struct libp2p_secio::SecioMiddleware\">SecioMiddleware</a>&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: <a class=\"trait\" href=\"futures_io/if_std/trait.AsyncRead.html\" title=\"trait futures_io::if_std::AsyncRead\">AsyncRead</a> + <a class=\"trait\" href=\"futures_io/if_std/trait.AsyncWrite.html\" title=\"trait futures_io::if_std::AsyncWrite\">AsyncWrite</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Unpin.html\" title=\"trait core::marker::Unpin\">Unpin</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,&nbsp;</span>","synthetic":false,"types":["libp2p_secio::SecioMiddleware"]}];
implementors["libp2p_swarm"] = [{"text":"impl&lt;TBehaviour, TInEvent, TOutEvent, THandler, TConnInfo&gt; <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"libp2p_swarm/struct.ExpandedSwarm.html\" title=\"struct libp2p_swarm::ExpandedSwarm\">ExpandedSwarm</a>&lt;TBehaviour, TInEvent, TOutEvent, THandler, TConnInfo&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TBehaviour: <a class=\"trait\" href=\"libp2p_swarm/trait.NetworkBehaviour.html\" title=\"trait libp2p_swarm::NetworkBehaviour\">NetworkBehaviour</a>&lt;ProtocolsHandler = THandler&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;THandler: <a class=\"trait\" href=\"libp2p_swarm/protocols_handler/trait.IntoProtocolsHandler.html\" title=\"trait libp2p_swarm::protocols_handler::IntoProtocolsHandler\">IntoProtocolsHandler</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;TInEvent: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;TOutEvent: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;THandler::<a class=\"type\" href=\"libp2p_swarm/protocols_handler/trait.IntoProtocolsHandler.html#associatedtype.Handler\" title=\"type libp2p_swarm::protocols_handler::IntoProtocolsHandler::Handler\">Handler</a>: <a class=\"trait\" href=\"libp2p_swarm/protocols_handler/trait.ProtocolsHandler.html\" title=\"trait libp2p_swarm::protocols_handler::ProtocolsHandler\">ProtocolsHandler</a>&lt;InEvent = TInEvent, OutEvent = TOutEvent&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;TConnInfo: <a class=\"trait\" href=\"libp2p_core/connection/trait.ConnectionInfo.html\" title=\"trait libp2p_core::connection::ConnectionInfo\">ConnectionInfo</a>&lt;PeerId = <a class=\"struct\" href=\"libp2p_core/peer_id/struct.PeerId.html\" title=\"struct libp2p_core::peer_id::PeerId\">PeerId</a>&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,&nbsp;</span>","synthetic":false,"types":["libp2p_swarm::ExpandedSwarm"]}];
implementors["libp2p_wasm_ext"] = [{"text":"impl <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"libp2p_wasm_ext/struct.Listen.html\" title=\"struct libp2p_wasm_ext::Listen\">Listen</a>","synthetic":false,"types":["libp2p_wasm_ext::Listen"]}];
implementors["libp2p_websocket"] = [{"text":"impl&lt;T&gt; <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"libp2p_websocket/framed/struct.Connection.html\" title=\"struct libp2p_websocket::framed::Connection\">Connection</a>&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: <a class=\"trait\" href=\"futures_io/if_std/trait.AsyncRead.html\" title=\"trait futures_io::if_std::AsyncRead\">AsyncRead</a> + <a class=\"trait\" href=\"futures_io/if_std/trait.AsyncWrite.html\" title=\"trait futures_io::if_std::AsyncWrite\">AsyncWrite</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Unpin.html\" title=\"trait core::marker::Unpin\">Unpin</a> + 'static,&nbsp;</span>","synthetic":false,"types":["libp2p_websocket::framed::Connection"]},{"text":"impl&lt;T&gt; <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"libp2p_websocket/struct.BytesConnection.html\" title=\"struct libp2p_websocket::BytesConnection\">BytesConnection</a>&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: <a class=\"trait\" href=\"futures_io/if_std/trait.AsyncRead.html\" title=\"trait futures_io::if_std::AsyncRead\">AsyncRead</a> + <a class=\"trait\" href=\"futures_io/if_std/trait.AsyncWrite.html\" title=\"trait futures_io::if_std::AsyncWrite\">AsyncWrite</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Unpin.html\" title=\"trait core::marker::Unpin\">Unpin</a> + 'static,&nbsp;</span>","synthetic":false,"types":["libp2p_websocket::BytesConnection"]}];
implementors["libp2p_yamux"] = [{"text":"impl&lt;T&gt; <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"libp2p_yamux/struct.Incoming.html\" title=\"struct libp2p_yamux::Incoming\">Incoming</a>&lt;T&gt;","synthetic":false,"types":["libp2p_yamux::Incoming"]},{"text":"impl&lt;T&gt; <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"libp2p_yamux/struct.LocalIncoming.html\" title=\"struct libp2p_yamux::LocalIncoming\">LocalIncoming</a>&lt;T&gt;","synthetic":false,"types":["libp2p_yamux::LocalIncoming"]}];
implementors["sc_peerset"] = [{"text":"impl <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"sc_peerset/struct.Peerset.html\" title=\"struct sc_peerset::Peerset\">Peerset</a>","synthetic":false,"types":["sc_peerset::Peerset"]}];
implementors["sc_telemetry"] = [{"text":"impl <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"sc_telemetry/struct.Telemetry.html\" title=\"struct sc_telemetry::Telemetry\">Telemetry</a>","synthetic":false,"types":["sc_telemetry::Telemetry"]}];
implementors["sp_utils"] = [{"text":"impl&lt;T&gt; <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"sp_utils/mpsc/struct.TracingUnboundedReceiver.html\" title=\"struct sp_utils::mpsc::TracingUnboundedReceiver\">TracingUnboundedReceiver</a>&lt;T&gt;","synthetic":false,"types":["sp_utils::mpsc::inner::TracingUnboundedReceiver"]}];
implementors["tokio_util"] = [{"text":"impl&lt;T, U&gt; <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"tokio_util/codec/struct.Framed.html\" title=\"struct tokio_util::codec::Framed\">Framed</a>&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: <a class=\"trait\" href=\"tokio/io/async_read/trait.AsyncRead.html\" title=\"trait tokio::io::async_read::AsyncRead\">AsyncRead</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: <a class=\"trait\" href=\"tokio_util/codec/trait.Decoder.html\" title=\"trait tokio_util::codec::Decoder\">Decoder</a>,&nbsp;</span>","synthetic":false,"types":["tokio_util::codec::framed::Framed"]},{"text":"impl&lt;T, D&gt; <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"tokio_util/codec/struct.FramedRead.html\" title=\"struct tokio_util::codec::FramedRead\">FramedRead</a>&lt;T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: <a class=\"trait\" href=\"tokio/io/async_read/trait.AsyncRead.html\" title=\"trait tokio::io::async_read::AsyncRead\">AsyncRead</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: <a class=\"trait\" href=\"tokio_util/codec/trait.Decoder.html\" title=\"trait tokio_util::codec::Decoder\">Decoder</a>,&nbsp;</span>","synthetic":false,"types":["tokio_util::codec::framed_read::FramedRead"]},{"text":"impl&lt;T, D&gt; <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"tokio_util/codec/struct.FramedWrite.html\" title=\"struct tokio_util::codec::FramedWrite\">FramedWrite</a>&lt;T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a>,&nbsp;</span>","synthetic":false,"types":["tokio_util::codec::framed_write::FramedWrite"]}];
implementors["wasm_timer"] = [{"text":"impl&lt;S&gt; <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"wasm_timer/ext/struct.TimeoutStream.html\" title=\"struct wasm_timer::ext::TimeoutStream\">TimeoutStream</a>&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: <a class=\"trait\" href=\"futures_core/stream/trait.TryStream.html\" title=\"trait futures_core::stream::TryStream\">TryStream</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::<a class=\"type\" href=\"futures_core/stream/trait.TryStream.html#associatedtype.Error\" title=\"type futures_core::stream::TryStream::Error\">Error</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;,&nbsp;</span>","synthetic":false,"types":["wasm_timer::timer::ext::TimeoutStream"]},{"text":"impl <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"wasm_timer/struct.Interval.html\" title=\"struct wasm_timer::Interval\">Interval</a>","synthetic":false,"types":["wasm_timer::timer::interval::Interval"]}];
implementors["yamux"] = [{"text":"impl <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"yamux/struct.Stream.html\" title=\"struct yamux::Stream\">Stream</a>","synthetic":false,"types":["yamux::connection::stream::Stream"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()