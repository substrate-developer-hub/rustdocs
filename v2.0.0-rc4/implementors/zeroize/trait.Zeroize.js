(function() {var implementors = {};
implementors["curve25519_dalek"] = [{"text":"impl <a class=\"trait\" href=\"zeroize/trait.Zeroize.html\" title=\"trait zeroize::Zeroize\">Zeroize</a> for <a class=\"struct\" href=\"curve25519_dalek/scalar/struct.Scalar.html\" title=\"struct curve25519_dalek::scalar::Scalar\">Scalar</a>","synthetic":false,"types":["curve25519_dalek::scalar::Scalar"]},{"text":"impl <a class=\"trait\" href=\"zeroize/trait.Zeroize.html\" title=\"trait zeroize::Zeroize\">Zeroize</a> for <a class=\"struct\" href=\"curve25519_dalek/montgomery/struct.MontgomeryPoint.html\" title=\"struct curve25519_dalek::montgomery::MontgomeryPoint\">MontgomeryPoint</a>","synthetic":false,"types":["curve25519_dalek::montgomery::MontgomeryPoint"]}];
implementors["libp2p_noise"] = [{"text":"impl <a class=\"trait\" href=\"zeroize/trait.Zeroize.html\" title=\"trait zeroize::Zeroize\">Zeroize</a> for <a class=\"struct\" href=\"libp2p_noise/struct.X25519.html\" title=\"struct libp2p_noise::X25519\">X25519</a>","synthetic":false,"types":["libp2p_noise::protocol::x25519::X25519"]},{"text":"impl <a class=\"trait\" href=\"zeroize/trait.Zeroize.html\" title=\"trait zeroize::Zeroize\">Zeroize</a> for <a class=\"struct\" href=\"libp2p_noise/struct.X25519Spec.html\" title=\"struct libp2p_noise::X25519Spec\">X25519Spec</a>","synthetic":false,"types":["libp2p_noise::protocol::x25519_spec::X25519Spec"]}];
implementors["merlin"] = [{"text":"impl <a class=\"trait\" href=\"zeroize/trait.Zeroize.html\" title=\"trait zeroize::Zeroize\">Zeroize</a> for <a class=\"struct\" href=\"merlin/struct.Transcript.html\" title=\"struct merlin::Transcript\">Transcript</a>","synthetic":false,"types":["merlin::transcript::Transcript"]}];
implementors["schnorrkel"] = [{"text":"impl <a class=\"trait\" href=\"zeroize/trait.Zeroize.html\" title=\"trait zeroize::Zeroize\">Zeroize</a> for <a class=\"struct\" href=\"schnorrkel/keys/struct.MiniSecretKey.html\" title=\"struct schnorrkel::keys::MiniSecretKey\">MiniSecretKey</a>","synthetic":false,"types":["schnorrkel::keys::MiniSecretKey"]},{"text":"impl <a class=\"trait\" href=\"zeroize/trait.Zeroize.html\" title=\"trait zeroize::Zeroize\">Zeroize</a> for <a class=\"struct\" href=\"schnorrkel/keys/struct.SecretKey.html\" title=\"struct schnorrkel::keys::SecretKey\">SecretKey</a>","synthetic":false,"types":["schnorrkel::keys::SecretKey"]},{"text":"impl <a class=\"trait\" href=\"zeroize/trait.Zeroize.html\" title=\"trait zeroize::Zeroize\">Zeroize</a> for <a class=\"struct\" href=\"schnorrkel/keys/struct.Keypair.html\" title=\"struct schnorrkel::keys::Keypair\">Keypair</a>","synthetic":false,"types":["schnorrkel::keys::Keypair"]}];
implementors["sp_core"] = [{"text":"impl&lt;T:&nbsp;<a class=\"trait\" href=\"zeroize/trait.Zeroize.html\" title=\"trait zeroize::Zeroize\">Zeroize</a>&gt; <a class=\"trait\" href=\"zeroize/trait.Zeroize.html\" title=\"trait zeroize::Zeroize\">Zeroize</a> for <a class=\"struct\" href=\"sp_core/crypto/struct.Protected.html\" title=\"struct sp_core::crypto::Protected\">Protected</a>&lt;T&gt;","synthetic":false,"types":["sp_core::crypto::Protected"]}];
implementors["x25519_dalek"] = [{"text":"impl <a class=\"trait\" href=\"zeroize/trait.Zeroize.html\" title=\"trait zeroize::Zeroize\">Zeroize</a> for <a class=\"struct\" href=\"x25519_dalek/struct.EphemeralSecret.html\" title=\"struct x25519_dalek::EphemeralSecret\">EphemeralSecret</a>","synthetic":false,"types":["x25519_dalek::x25519::EphemeralSecret"]},{"text":"impl <a class=\"trait\" href=\"zeroize/trait.Zeroize.html\" title=\"trait zeroize::Zeroize\">Zeroize</a> for <a class=\"struct\" href=\"x25519_dalek/struct.StaticSecret.html\" title=\"struct x25519_dalek::StaticSecret\">StaticSecret</a>","synthetic":false,"types":["x25519_dalek::x25519::StaticSecret"]},{"text":"impl <a class=\"trait\" href=\"zeroize/trait.Zeroize.html\" title=\"trait zeroize::Zeroize\">Zeroize</a> for <a class=\"struct\" href=\"x25519_dalek/struct.SharedSecret.html\" title=\"struct x25519_dalek::SharedSecret\">SharedSecret</a>","synthetic":false,"types":["x25519_dalek::x25519::SharedSecret"]}];
implementors["zeroize"] = [];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()