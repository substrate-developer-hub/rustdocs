initSidebarItems({"enum":[["Call","Dispatchable calls."],["ContractInfo","Information for managing an account and its sub trie abstraction. This is the required info to cache for an account"],["Error","Error for the contracts module."],["RawEvent","Events for this module."]],"macro":[["convert_args",""],["define_func",""],["gen_signature",""],["gen_signature_dispatch",""],["match_tokens","A simple utility macro that helps to match against a list of tokens."],["register_func",""],["try_or_exec_error","Evaluate an expression of type Result<_, &'static str> and either resolve to the value if Ok or wrap the error string into an ExecutionError with the provided buffer and return from the enclosing function. This macro is used instead of .map_err(..)? in order to avoid taking ownership of buffer unless there is an error."],["unmarshall_then_body_then_marshall",""]],"struct":[["AccountCounter","The subtrie counter."],["CodeStorage","A mapping between an original code hash and instrumented wasm code, ready for execution."],["Config","In-memory cache of configuration values."],["ContractInfoOf","The code associated with a given account."],["DefaultMaxDepth","A reasonable default value for [`Trait::MaxDepth`]."],["DefaultMaxValueSize","A reasonable default value for [`Trait::MaxValueSize`]."],["DefaultRentByteFee","A reasonable default value for [`Trait::RentByteFee`]."],["DefaultRentDepositOffset","A reasonable default value for [`Trait::RentDepositOffset`]."],["DefaultSignedClaimHandicap","A reasonable default value for [`Trait::SignedClaimedHandicap`]."],["DefaultStorageSizeOffset","A reasonable default value for [`Trait::StorageSizeOffset`]."],["DefaultSurchargeReward","A reasonable default value for [`Trait::SurchargeReward`]."],["DefaultTombstoneDeposit","A reasonable default value for [`Trait::TombstoneDeposit`]."],["ExecError","An error indicating some failure to execute a contract call or instantiation. This can include VM-specific errors during execution (eg. division by 0, OOB access, failure to satisfy some precondition of a system call, etc.) or errors with the orchestration (eg. out-of-gas errors, a non-existent destination contract, etc.)."],["ExecReturnValue","Output of a contract call or instantiation which ran to completion."],["GasMeter",""],["GenesisConfig","Genesis config for the module, allow to build genesis storage."],["Module","Contracts module."],["PristineCode","A mapping from an original code hash to the original code, untouched by instrumentation."],["RawAliveContractInfo","Information for managing an account and its sub trie abstraction. This is the required info to cache for an account."],["RawTombstoneContractInfo",""],["Schedule","Definition of the cost schedule and other parameterizations for wasm vm."],["SimpleAddressDeterminer","Simple contract address determiner."],["TrieIdFromParentCounter","Get trie id from `account_id`."]],"trait":[["ContractAddressFor","A function that generates an `AccountId` for a contract upon instantiation."],["Trait",""],["TrieIdGenerator","Get a trie id (trie id must be unique and collision resistant depending upon its context). Note that it is different than encode because trie id should be collision resistant (being a proper unique identifier)."]],"type":[["AliveContractInfo",""],["BalanceOf",""],["CodeHash",""],["Event","[`RawEvent`] specialized for the configuration [`Trait`]"],["ExecResult",""],["Gas",""],["NegativeImbalanceOf",""],["StatusCode","A status code return to the source of a contract call or instantiation indicating success or failure. A code of 0 indicates success and that changes are applied. All other codes indicate failure and that changes are reverted. The particular code in the case of failure is opaque and may be interpreted by the calling contract."],["TombstoneContractInfo",""],["TrieId",""]]});