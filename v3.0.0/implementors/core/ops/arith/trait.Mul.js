(function() {var implementors = {};
implementors["curve25519_dalek"] = [{"text":"impl&lt;'a, 'b&gt; Mul&lt;&amp;'b Scalar&gt; for &amp;'a Scalar","synthetic":false,"types":[]},{"text":"impl&lt;'b&gt; Mul&lt;&amp;'b Scalar&gt; for Scalar","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;Scalar&gt; for &amp;'a Scalar","synthetic":false,"types":[]},{"text":"impl Mul&lt;Scalar&gt; for Scalar","synthetic":false,"types":[]},{"text":"impl&lt;'b&gt; Mul&lt;&amp;'b Scalar&gt; for MontgomeryPoint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;Scalar&gt; for &amp;'a MontgomeryPoint","synthetic":false,"types":[]},{"text":"impl Mul&lt;Scalar&gt; for MontgomeryPoint","synthetic":false,"types":[]},{"text":"impl&lt;'b&gt; Mul&lt;&amp;'b MontgomeryPoint&gt; for Scalar","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;MontgomeryPoint&gt; for &amp;'a Scalar","synthetic":false,"types":[]},{"text":"impl Mul&lt;MontgomeryPoint&gt; for Scalar","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Mul&lt;&amp;'b Scalar&gt; for &amp;'a MontgomeryPoint","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Mul&lt;&amp;'b MontgomeryPoint&gt; for &amp;'a Scalar","synthetic":false,"types":[]},{"text":"impl&lt;'b&gt; Mul&lt;&amp;'b Scalar&gt; for EdwardsPoint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;Scalar&gt; for &amp;'a EdwardsPoint","synthetic":false,"types":[]},{"text":"impl Mul&lt;Scalar&gt; for EdwardsPoint","synthetic":false,"types":[]},{"text":"impl&lt;'b&gt; Mul&lt;&amp;'b EdwardsPoint&gt; for Scalar","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;EdwardsPoint&gt; for &amp;'a Scalar","synthetic":false,"types":[]},{"text":"impl Mul&lt;EdwardsPoint&gt; for Scalar","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Mul&lt;&amp;'b Scalar&gt; for &amp;'a EdwardsPoint","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Mul&lt;&amp;'b EdwardsPoint&gt; for &amp;'a Scalar","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Mul&lt;&amp;'b Scalar&gt; for &amp;'a EdwardsBasepointTable","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Mul&lt;&amp;'a EdwardsBasepointTable&gt; for &amp;'b Scalar","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Mul&lt;&amp;'b Scalar&gt; for &amp;'a RistrettoPoint","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Mul&lt;&amp;'b RistrettoPoint&gt; for &amp;'a Scalar","synthetic":false,"types":[]},{"text":"impl&lt;'b&gt; Mul&lt;&amp;'b Scalar&gt; for RistrettoPoint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;Scalar&gt; for &amp;'a RistrettoPoint","synthetic":false,"types":[]},{"text":"impl Mul&lt;Scalar&gt; for RistrettoPoint","synthetic":false,"types":[]},{"text":"impl&lt;'b&gt; Mul&lt;&amp;'b RistrettoPoint&gt; for Scalar","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;RistrettoPoint&gt; for &amp;'a Scalar","synthetic":false,"types":[]},{"text":"impl Mul&lt;RistrettoPoint&gt; for Scalar","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Mul&lt;&amp;'b Scalar&gt; for &amp;'a RistrettoBasepointTable","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Mul&lt;&amp;'a RistrettoBasepointTable&gt; for &amp;'b Scalar","synthetic":false,"types":[]}];
implementors["memory_units"] = [{"text":"impl&lt;T:&nbsp;Into&lt;Self&gt;&gt; Mul&lt;T&gt; for Bytes","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Into&lt;Self&gt;&gt; Mul&lt;T&gt; for Words","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Into&lt;Self&gt;&gt; Mul&lt;T&gt; for Pages","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Into&lt;Self&gt;&gt; Mul&lt;T&gt; for Words","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Into&lt;Self&gt;&gt; Mul&lt;T&gt; for Pages","synthetic":false,"types":[]}];
implementors["nalgebra"] = [{"text":"impl&lt;N, R:&nbsp;Dim, C:&nbsp;Dim, S&gt; Mul&lt;N&gt; for Matrix&lt;N, R, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Storage&lt;N, R, C&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R, C&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, R:&nbsp;Dim, C:&nbsp;Dim, S&gt; Mul&lt;N&gt; for &amp;'a Matrix&lt;N, R, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Storage&lt;N, R, C&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R, C&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N, R1:&nbsp;Dim, C1:&nbsp;Dim, R2:&nbsp;Dim, C2:&nbsp;Dim, SA, SB&gt; Mul&lt;&amp;'b Matrix&lt;N, R2, C2, SB&gt;&gt; for &amp;'a Matrix&lt;N, R1, C1, SA&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;SA: Storage&lt;N, R1, C1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;SB: Storage&lt;N, R2, C2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R1, C2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;R1, C1, R2, C2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, R1:&nbsp;Dim, C1:&nbsp;Dim, R2:&nbsp;Dim, C2:&nbsp;Dim, SA, SB&gt; Mul&lt;Matrix&lt;N, R2, C2, SB&gt;&gt; for &amp;'a Matrix&lt;N, R1, C1, SA&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;SB: Storage&lt;N, R2, C2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;SA: Storage&lt;N, R1, C1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R1, C2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;R1, C1, R2, C2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, R1:&nbsp;Dim, C1:&nbsp;Dim, R2:&nbsp;Dim, C2:&nbsp;Dim, SA, SB&gt; Mul&lt;&amp;'b Matrix&lt;N, R2, C2, SB&gt;&gt; for Matrix&lt;N, R1, C1, SA&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;SB: Storage&lt;N, R2, C2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;SA: Storage&lt;N, R1, C1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R1, C2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;R1, C1, R2, C2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, R1:&nbsp;Dim, C1:&nbsp;Dim, R2:&nbsp;Dim, C2:&nbsp;Dim, SA, SB&gt; Mul&lt;Matrix&lt;N, R2, C2, SB&gt;&gt; for Matrix&lt;N, R1, C1, SA&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;SB: Storage&lt;N, R2, C2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;SA: Storage&lt;N, R1, C1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R1, C2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;R1, C1, R2, C2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, R1:&nbsp;DimName, C1:&nbsp;Dim, D2:&nbsp;DimName, SA:&nbsp;Storage&lt;N, R1, C1&gt;&gt; Mul&lt;Point&lt;N, D2&gt;&gt; for Matrix&lt;N, R1, C1, SA&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R1, C1&gt; + Allocator&lt;N, D2, U1&gt; + Allocator&lt;N, R1, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;R1, C1, D2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, R1:&nbsp;DimName, C1:&nbsp;Dim, D2:&nbsp;DimName, SA:&nbsp;Storage&lt;N, R1, C1&gt;&gt; Mul&lt;Point&lt;N, D2&gt;&gt; for &amp;'a Matrix&lt;N, R1, C1, SA&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R1, C1&gt; + Allocator&lt;N, D2, U1&gt; + Allocator&lt;N, R1, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;R1, C1, D2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, R1:&nbsp;DimName, C1:&nbsp;Dim, D2:&nbsp;DimName, SA:&nbsp;Storage&lt;N, R1, C1&gt;&gt; Mul&lt;&amp;'b Point&lt;N, D2&gt;&gt; for Matrix&lt;N, R1, C1, SA&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R1, C1&gt; + Allocator&lt;N, D2, U1&gt; + Allocator&lt;N, R1, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;R1, C1, D2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N, R1:&nbsp;DimName, C1:&nbsp;Dim, D2:&nbsp;DimName, SA:&nbsp;Storage&lt;N, R1, C1&gt;&gt; Mul&lt;&amp;'b Point&lt;N, D2&gt;&gt; for &amp;'a Matrix&lt;N, R1, C1, SA&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R1, C1&gt; + Allocator&lt;N, D2, U1&gt; + Allocator&lt;N, R1, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;R1, C1, D2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Scalar + ClosedMul, D:&nbsp;DimName&gt; Mul&lt;N&gt; for Point&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;Scalar + ClosedMul, D:&nbsp;DimName&gt; Mul&lt;N&gt; for &amp;'a Point&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, D:&nbsp;DimName&gt; Mul&lt;Rotation&lt;N, D&gt;&gt; for Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, D:&nbsp;DimName&gt; Mul&lt;Rotation&lt;N, D&gt;&gt; for &amp;'a Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Rotation&lt;N, D&gt;&gt; for Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Rotation&lt;N, D&gt;&gt; for &amp;'a Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, D1:&nbsp;DimName, R2:&nbsp;Dim, C2:&nbsp;Dim, SB:&nbsp;Storage&lt;N, R2, C2&gt;&gt; Mul&lt;Matrix&lt;N, R2, C2, SB&gt;&gt; for Rotation&lt;N, D1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D1, D1&gt; + Allocator&lt;N, R2, C2&gt; + Allocator&lt;N, D1, C2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D1, C2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;D1, D1, R2, C2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, D1:&nbsp;DimName, R2:&nbsp;Dim, C2:&nbsp;Dim, SB:&nbsp;Storage&lt;N, R2, C2&gt;&gt; Mul&lt;Matrix&lt;N, R2, C2, SB&gt;&gt; for &amp;'a Rotation&lt;N, D1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D1, D1&gt; + Allocator&lt;N, R2, C2&gt; + Allocator&lt;N, D1, C2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D1, C2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;D1, D1, R2, C2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, D1:&nbsp;DimName, R2:&nbsp;Dim, C2:&nbsp;Dim, SB:&nbsp;Storage&lt;N, R2, C2&gt;&gt; Mul&lt;&amp;'b Matrix&lt;N, R2, C2, SB&gt;&gt; for Rotation&lt;N, D1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D1, D1&gt; + Allocator&lt;N, R2, C2&gt; + Allocator&lt;N, D1, C2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D1, C2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;D1, D1, R2, C2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N, D1:&nbsp;DimName, R2:&nbsp;Dim, C2:&nbsp;Dim, SB:&nbsp;Storage&lt;N, R2, C2&gt;&gt; Mul&lt;&amp;'b Matrix&lt;N, R2, C2, SB&gt;&gt; for &amp;'a Rotation&lt;N, D1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D1, D1&gt; + Allocator&lt;N, R2, C2&gt; + Allocator&lt;N, D1, C2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D1, C2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;D1, D1, R2, C2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, R1:&nbsp;Dim, C1:&nbsp;Dim, D2:&nbsp;DimName, SA:&nbsp;Storage&lt;N, R1, C1&gt;&gt; Mul&lt;Rotation&lt;N, D2&gt;&gt; for Matrix&lt;N, R1, C1, SA&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R1, C1&gt; + Allocator&lt;N, D2, D2&gt; + Allocator&lt;N, R1, D2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R1, D2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;R1, C1, D2, D2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, R1:&nbsp;Dim, C1:&nbsp;Dim, D2:&nbsp;DimName, SA:&nbsp;Storage&lt;N, R1, C1&gt;&gt; Mul&lt;Rotation&lt;N, D2&gt;&gt; for &amp;'a Matrix&lt;N, R1, C1, SA&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R1, C1&gt; + Allocator&lt;N, D2, D2&gt; + Allocator&lt;N, R1, D2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R1, D2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;R1, C1, D2, D2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, R1:&nbsp;Dim, C1:&nbsp;Dim, D2:&nbsp;DimName, SA:&nbsp;Storage&lt;N, R1, C1&gt;&gt; Mul&lt;&amp;'b Rotation&lt;N, D2&gt;&gt; for Matrix&lt;N, R1, C1, SA&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R1, C1&gt; + Allocator&lt;N, D2, D2&gt; + Allocator&lt;N, R1, D2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R1, D2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;R1, C1, D2, D2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N, R1:&nbsp;Dim, C1:&nbsp;Dim, D2:&nbsp;DimName, SA:&nbsp;Storage&lt;N, R1, C1&gt;&gt; Mul&lt;&amp;'b Rotation&lt;N, D2&gt;&gt; for &amp;'a Matrix&lt;N, R1, C1, SA&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R1, C1&gt; + Allocator&lt;N, D2, D2&gt; + Allocator&lt;N, R1, D2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R1, D2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;R1, C1, D2, D2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, D:&nbsp;DimName&gt; Mul&lt;Point&lt;N, D&gt;&gt; for Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;D, D, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, D:&nbsp;DimName&gt; Mul&lt;Point&lt;N, D&gt;&gt; for &amp;'a Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;D, D, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Point&lt;N, D&gt;&gt; for Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;D, D, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Point&lt;N, D&gt;&gt; for &amp;'a Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;D, D, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, D:&nbsp;DimName, S:&nbsp;Storage&lt;N, D&gt;&gt; Mul&lt;Unit&lt;Matrix&lt;N, D, U1, S&gt;&gt;&gt; for Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;D, D, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, D:&nbsp;DimName, S:&nbsp;Storage&lt;N, D&gt;&gt; Mul&lt;Unit&lt;Matrix&lt;N, D, U1, S&gt;&gt;&gt; for &amp;'a Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;D, D, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, D:&nbsp;DimName, S:&nbsp;Storage&lt;N, D&gt;&gt; Mul&lt;&amp;'b Unit&lt;Matrix&lt;N, D, U1, S&gt;&gt;&gt; for Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;D, D, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N, D:&nbsp;DimName, S:&nbsp;Storage&lt;N, D&gt;&gt; Mul&lt;&amp;'b Unit&lt;Matrix&lt;N, D, U1, S&gt;&gt;&gt; for &amp;'a Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;D, D, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Quaternion&lt;N&gt;&gt; for &amp;'a Quaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField&gt; Mul&lt;Quaternion&lt;N&gt;&gt; for &amp;'a Quaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Quaternion&lt;N&gt;&gt; for Quaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; Mul&lt;Quaternion&lt;N&gt;&gt; for Quaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for &amp;'a UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField&gt; Mul&lt;Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for &amp;'a UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; Mul&lt;Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Rotation&lt;N, U3&gt;&gt; for &amp;'a UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U3&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField&gt; Mul&lt;Rotation&lt;N, U3&gt;&gt; for &amp;'a UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U3&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Rotation&lt;N, U3&gt;&gt; for UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U3&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; Mul&lt;Rotation&lt;N, U3&gt;&gt; for UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U3&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for &amp;'a Rotation&lt;N, U3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U3, U3&gt; + Allocator&lt;N, U4, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField&gt; Mul&lt;Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for &amp;'a Rotation&lt;N, U3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U3, U3&gt; + Allocator&lt;N, U4, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for Rotation&lt;N, U3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U3, U3&gt; + Allocator&lt;N, U4, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; Mul&lt;Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for Rotation&lt;N, U3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U3, U3&gt; + Allocator&lt;N, U4, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField, SB:&nbsp;Storage&lt;N, U3&gt;&gt; Mul&lt;&amp;'b Matrix&lt;N, U3, U1, SB&gt;&gt; for &amp;'a UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField, SB:&nbsp;Storage&lt;N, U3&gt;&gt; Mul&lt;Matrix&lt;N, U3, U1, SB&gt;&gt; for &amp;'a UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, SB:&nbsp;Storage&lt;N, U3&gt;&gt; Mul&lt;&amp;'b Matrix&lt;N, U3, U1, SB&gt;&gt; for UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, SB:&nbsp;Storage&lt;N, U3&gt;&gt; Mul&lt;Matrix&lt;N, U3, U1, SB&gt;&gt; for UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Point&lt;N, U3&gt;&gt; for &amp;'a UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField&gt; Mul&lt;Point&lt;N, U3&gt;&gt; for &amp;'a UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Point&lt;N, U3&gt;&gt; for UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; Mul&lt;Point&lt;N, U3&gt;&gt; for UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField, SB:&nbsp;Storage&lt;N, U3&gt;&gt; Mul&lt;&amp;'b Unit&lt;Matrix&lt;N, U3, U1, SB&gt;&gt;&gt; for &amp;'a UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField, SB:&nbsp;Storage&lt;N, U3&gt;&gt; Mul&lt;Unit&lt;Matrix&lt;N, U3, U1, SB&gt;&gt;&gt; for &amp;'a UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, SB:&nbsp;Storage&lt;N, U3&gt;&gt; Mul&lt;&amp;'b Unit&lt;Matrix&lt;N, U3, U1, SB&gt;&gt;&gt; for UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, SB:&nbsp;Storage&lt;N, U3&gt;&gt; Mul&lt;Unit&lt;Matrix&lt;N, U3, U1, SB&gt;&gt;&gt; for UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; Mul&lt;N&gt; for Quaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField&gt; Mul&lt;N&gt; for &amp;'a Quaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; Mul&lt;Unit&lt;Complex&lt;N&gt;&gt;&gt; for UnitComplex&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField&gt; Mul&lt;Unit&lt;Complex&lt;N&gt;&gt;&gt; for &amp;'a UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Unit&lt;Complex&lt;N&gt;&gt;&gt; for UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Unit&lt;Complex&lt;N&gt;&gt;&gt; for &amp;'a UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; Mul&lt;Rotation&lt;N, U2&gt;&gt; for UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField&gt; Mul&lt;Rotation&lt;N, U2&gt;&gt; for &amp;'a UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Rotation&lt;N, U2&gt;&gt; for UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Rotation&lt;N, U2&gt;&gt; for &amp;'a UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; Mul&lt;Unit&lt;Complex&lt;N&gt;&gt;&gt; for Rotation&lt;N, U2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField&gt; Mul&lt;Unit&lt;Complex&lt;N&gt;&gt;&gt; for &amp;'a Rotation&lt;N, U2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Unit&lt;Complex&lt;N&gt;&gt;&gt; for Rotation&lt;N, U2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Unit&lt;Complex&lt;N&gt;&gt;&gt; for &amp;'a Rotation&lt;N, U2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; Mul&lt;Point&lt;N, U2&gt;&gt; for UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField&gt; Mul&lt;Point&lt;N, U2&gt;&gt; for &amp;'a UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Point&lt;N, U2&gt;&gt; for UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Point&lt;N, U2&gt;&gt; for &amp;'a UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, S:&nbsp;Storage&lt;N, U2&gt;&gt; Mul&lt;Matrix&lt;N, U2, U1, S&gt;&gt; for UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField, S:&nbsp;Storage&lt;N, U2&gt;&gt; Mul&lt;Matrix&lt;N, U2, U1, S&gt;&gt; for &amp;'a UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, S:&nbsp;Storage&lt;N, U2&gt;&gt; Mul&lt;&amp;'b Matrix&lt;N, U2, U1, S&gt;&gt; for UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField, S:&nbsp;Storage&lt;N, U2&gt;&gt; Mul&lt;&amp;'b Matrix&lt;N, U2, U1, S&gt;&gt; for &amp;'a UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, S:&nbsp;Storage&lt;N, U2&gt;&gt; Mul&lt;Unit&lt;Matrix&lt;N, U2, U1, S&gt;&gt;&gt; for UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField, S:&nbsp;Storage&lt;N, U2&gt;&gt; Mul&lt;Unit&lt;Matrix&lt;N, U2, U1, S&gt;&gt;&gt; for &amp;'a UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, S:&nbsp;Storage&lt;N, U2&gt;&gt; Mul&lt;&amp;'b Unit&lt;Matrix&lt;N, U2, U1, S&gt;&gt;&gt; for UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField, S:&nbsp;Storage&lt;N, U2&gt;&gt; Mul&lt;&amp;'b Unit&lt;Matrix&lt;N, U2, U1, S&gt;&gt;&gt; for &amp;'a UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; Mul&lt;Isometry&lt;N, U2, Unit&lt;Complex&lt;N&gt;&gt;&gt;&gt; for UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField&gt; Mul&lt;Isometry&lt;N, U2, Unit&lt;Complex&lt;N&gt;&gt;&gt;&gt; for &amp;'a UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Isometry&lt;N, U2, Unit&lt;Complex&lt;N&gt;&gt;&gt;&gt; for UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Isometry&lt;N, U2, Unit&lt;Complex&lt;N&gt;&gt;&gt;&gt; for &amp;'a UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; Mul&lt;Similarity&lt;N, U2, Unit&lt;Complex&lt;N&gt;&gt;&gt;&gt; for UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField&gt; Mul&lt;Similarity&lt;N, U2, Unit&lt;Complex&lt;N&gt;&gt;&gt;&gt; for &amp;'a UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Similarity&lt;N, U2, Unit&lt;Complex&lt;N&gt;&gt;&gt;&gt; for UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Similarity&lt;N, U2, Unit&lt;Complex&lt;N&gt;&gt;&gt;&gt; for &amp;'a UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; Mul&lt;Translation&lt;N, U2&gt;&gt; for UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField&gt; Mul&lt;Translation&lt;N, U2&gt;&gt; for &amp;'a UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Translation&lt;N, U2&gt;&gt; for UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Translation&lt;N, U2&gt;&gt; for &amp;'a UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; Mul&lt;Unit&lt;Complex&lt;N&gt;&gt;&gt; for Translation&lt;N, U2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField&gt; Mul&lt;Unit&lt;Complex&lt;N&gt;&gt;&gt; for &amp;'a Translation&lt;N, U2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Unit&lt;Complex&lt;N&gt;&gt;&gt; for Translation&lt;N, U2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Unit&lt;Complex&lt;N&gt;&gt;&gt; for &amp;'a Translation&lt;N, U2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Translation&lt;N, D&gt;&gt; for &amp;'a Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + ClosedAdd,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt; + SameShapeAllocator&lt;N, D, U1, D, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: SameNumberOfRows&lt;D, D, Representative = D&gt; + SameNumberOfColumns&lt;U1, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, D:&nbsp;DimName&gt; Mul&lt;Translation&lt;N, D&gt;&gt; for &amp;'a Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + ClosedAdd,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt; + SameShapeAllocator&lt;N, D, U1, D, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: SameNumberOfRows&lt;D, D, Representative = D&gt; + SameNumberOfColumns&lt;U1, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Translation&lt;N, D&gt;&gt; for Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + ClosedAdd,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt; + SameShapeAllocator&lt;N, D, U1, D, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: SameNumberOfRows&lt;D, D, Representative = D&gt; + SameNumberOfColumns&lt;U1, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, D:&nbsp;DimName&gt; Mul&lt;Translation&lt;N, D&gt;&gt; for Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + ClosedAdd,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt; + SameShapeAllocator&lt;N, D, U1, D, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: SameNumberOfRows&lt;D, D, Representative = D&gt; + SameNumberOfColumns&lt;U1, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Point&lt;N, D&gt;&gt; for &amp;'a Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + ClosedAdd,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt; + SameShapeAllocator&lt;N, D, U1, D, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: SameNumberOfRows&lt;D, D, Representative = D&gt; + SameNumberOfColumns&lt;U1, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, D:&nbsp;DimName&gt; Mul&lt;Point&lt;N, D&gt;&gt; for &amp;'a Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + ClosedAdd,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt; + SameShapeAllocator&lt;N, D, U1, D, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: SameNumberOfRows&lt;D, D, Representative = D&gt; + SameNumberOfColumns&lt;U1, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Point&lt;N, D&gt;&gt; for Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + ClosedAdd,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt; + SameShapeAllocator&lt;N, D, U1, D, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: SameNumberOfRows&lt;D, D, Representative = D&gt; + SameNumberOfColumns&lt;U1, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, D:&nbsp;DimName&gt; Mul&lt;Point&lt;N, D&gt;&gt; for Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + ClosedAdd,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt; + SameShapeAllocator&lt;N, D, U1, D, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: SameNumberOfRows&lt;D, D, Representative = D&gt; + SameNumberOfColumns&lt;U1, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Isometry&lt;N, D, R&gt;&gt; for Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Isometry&lt;N, D, R&gt;&gt; for &amp;'a Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Isometry&lt;N, D, R&gt;&gt; for Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Isometry&lt;N, D, R&gt;&gt; for &amp;'a Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Point&lt;N, D&gt;&gt; for Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Point&lt;N, D&gt;&gt; for &amp;'a Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Point&lt;N, D&gt;&gt; for Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Point&lt;N, D&gt;&gt; for &amp;'a Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Matrix&lt;N, D, U1, &lt;DefaultAllocator as Allocator&lt;N, D, U1&gt;&gt;::Buffer&gt;&gt; for Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Matrix&lt;N, D, U1, &lt;DefaultAllocator as Allocator&lt;N, D, U1&gt;&gt;::Buffer&gt;&gt; for &amp;'a Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Matrix&lt;N, D, U1, &lt;DefaultAllocator as Allocator&lt;N, D, U1&gt;&gt;::Buffer&gt;&gt; for Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Matrix&lt;N, D, U1, &lt;DefaultAllocator as Allocator&lt;N, D, U1&gt;&gt;::Buffer&gt;&gt; for &amp;'a Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Unit&lt;Matrix&lt;N, D, U1, &lt;DefaultAllocator as Allocator&lt;N, D, U1&gt;&gt;::Buffer&gt;&gt;&gt; for Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Unit&lt;Matrix&lt;N, D, U1, &lt;DefaultAllocator as Allocator&lt;N, D, U1&gt;&gt;::Buffer&gt;&gt;&gt; for &amp;'a Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Unit&lt;Matrix&lt;N, D, U1, &lt;DefaultAllocator as Allocator&lt;N, D, U1&gt;&gt;::Buffer&gt;&gt;&gt; for Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Unit&lt;Matrix&lt;N, D, U1, &lt;DefaultAllocator as Allocator&lt;N, D, U1&gt;&gt;::Buffer&gt;&gt;&gt; for &amp;'a Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Translation&lt;N, D&gt;&gt; for Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Translation&lt;N, D&gt;&gt; for &amp;'a Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Translation&lt;N, D&gt;&gt; for Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Translation&lt;N, D&gt;&gt; for &amp;'a Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Isometry&lt;N, D, R&gt;&gt; for Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Isometry&lt;N, D, R&gt;&gt; for &amp;'a Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Isometry&lt;N, D, R&gt;&gt; for Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Isometry&lt;N, D, R&gt;&gt; for &amp;'a Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, D:&nbsp;DimName&gt; Mul&lt;Translation&lt;N, D&gt;&gt; for Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField, D:&nbsp;DimName&gt; Mul&lt;Translation&lt;N, D&gt;&gt; for &amp;'a Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Translation&lt;N, D&gt;&gt; for Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Translation&lt;N, D&gt;&gt; for &amp;'a Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; Mul&lt;Translation&lt;N, U3&gt;&gt; for UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField&gt; Mul&lt;Translation&lt;N, U3&gt;&gt; for &amp;'a UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Translation&lt;N, U3&gt;&gt; for UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Translation&lt;N, U3&gt;&gt; for &amp;'a UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, D:&nbsp;DimName&gt; Mul&lt;Rotation&lt;N, D&gt;&gt; for Isometry&lt;N, D, Rotation&lt;N, D&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField, D:&nbsp;DimName&gt; Mul&lt;Rotation&lt;N, D&gt;&gt; for &amp;'a Isometry&lt;N, D, Rotation&lt;N, D&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Rotation&lt;N, D&gt;&gt; for Isometry&lt;N, D, Rotation&lt;N, D&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Rotation&lt;N, D&gt;&gt; for &amp;'a Isometry&lt;N, D, Rotation&lt;N, D&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, D:&nbsp;DimName&gt; Mul&lt;Isometry&lt;N, D, Rotation&lt;N, D&gt;&gt;&gt; for Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField, D:&nbsp;DimName&gt; Mul&lt;Isometry&lt;N, D, Rotation&lt;N, D&gt;&gt;&gt; for &amp;'a Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Isometry&lt;N, D, Rotation&lt;N, D&gt;&gt;&gt; for Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Isometry&lt;N, D, Rotation&lt;N, D&gt;&gt;&gt; for &amp;'a Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; Mul&lt;Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for Isometry&lt;N, U3, UnitQuaternion&lt;N&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField&gt; Mul&lt;Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for &amp;'a Isometry&lt;N, U3, UnitQuaternion&lt;N&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for Isometry&lt;N, U3, UnitQuaternion&lt;N&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for &amp;'a Isometry&lt;N, U3, UnitQuaternion&lt;N&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; Mul&lt;Isometry&lt;N, U3, Unit&lt;Quaternion&lt;N&gt;&gt;&gt;&gt; for UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField&gt; Mul&lt;Isometry&lt;N, U3, Unit&lt;Quaternion&lt;N&gt;&gt;&gt;&gt; for &amp;'a UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Isometry&lt;N, U3, Unit&lt;Quaternion&lt;N&gt;&gt;&gt;&gt; for UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Isometry&lt;N, U3, Unit&lt;Quaternion&lt;N&gt;&gt;&gt;&gt; for &amp;'a UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, D:&nbsp;DimName&gt; Mul&lt;Rotation&lt;N, D&gt;&gt; for Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField, D:&nbsp;DimName&gt; Mul&lt;Rotation&lt;N, D&gt;&gt; for &amp;'a Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Rotation&lt;N, D&gt;&gt; for Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Rotation&lt;N, D&gt;&gt; for &amp;'a Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; Mul&lt;Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for Translation&lt;N, U3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField&gt; Mul&lt;Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for &amp;'a Translation&lt;N, U3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for Translation&lt;N, U3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for &amp;'a Translation&lt;N, U3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; Mul&lt;Unit&lt;Complex&lt;N&gt;&gt;&gt; for Isometry&lt;N, U2, UnitComplex&lt;N&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField&gt; Mul&lt;Unit&lt;Complex&lt;N&gt;&gt;&gt; for &amp;'a Isometry&lt;N, U2, UnitComplex&lt;N&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Unit&lt;Complex&lt;N&gt;&gt;&gt; for Isometry&lt;N, U2, UnitComplex&lt;N&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Unit&lt;Complex&lt;N&gt;&gt;&gt; for &amp;'a Isometry&lt;N, U2, UnitComplex&lt;N&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Similarity&lt;N, D, R&gt;&gt; for Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Similarity&lt;N, D, R&gt;&gt; for &amp;'a Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Similarity&lt;N, D, R&gt;&gt; for Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Similarity&lt;N, D, R&gt;&gt; for &amp;'a Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Isometry&lt;N, D, R&gt;&gt; for Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Isometry&lt;N, D, R&gt;&gt; for &amp;'a Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Isometry&lt;N, D, R&gt;&gt; for Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Isometry&lt;N, D, R&gt;&gt; for &amp;'a Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Similarity&lt;N, D, R&gt;&gt; for Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Similarity&lt;N, D, R&gt;&gt; for &amp;'a Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Similarity&lt;N, D, R&gt;&gt; for Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Similarity&lt;N, D, R&gt;&gt; for &amp;'a Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Point&lt;N, D&gt;&gt; for Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Point&lt;N, D&gt;&gt; for &amp;'a Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Point&lt;N, D&gt;&gt; for Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Point&lt;N, D&gt;&gt; for &amp;'a Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Matrix&lt;N, D, U1, &lt;DefaultAllocator as Allocator&lt;N, D, U1&gt;&gt;::Buffer&gt;&gt; for Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Matrix&lt;N, D, U1, &lt;DefaultAllocator as Allocator&lt;N, D, U1&gt;&gt;::Buffer&gt;&gt; for &amp;'a Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Matrix&lt;N, D, U1, &lt;DefaultAllocator as Allocator&lt;N, D, U1&gt;&gt;::Buffer&gt;&gt; for Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Matrix&lt;N, D, U1, &lt;DefaultAllocator as Allocator&lt;N, D, U1&gt;&gt;::Buffer&gt;&gt; for &amp;'a Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Translation&lt;N, D&gt;&gt; for Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Translation&lt;N, D&gt;&gt; for &amp;'a Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Translation&lt;N, D&gt;&gt; for Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Translation&lt;N, D&gt;&gt; for &amp;'a Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Similarity&lt;N, D, R&gt;&gt; for Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Similarity&lt;N, D, R&gt;&gt; for &amp;'a Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Similarity&lt;N, D, R&gt;&gt; for Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Similarity&lt;N, D, R&gt;&gt; for &amp;'a Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, D:&nbsp;DimName&gt; Mul&lt;Rotation&lt;N, D&gt;&gt; for Similarity&lt;N, D, Rotation&lt;N, D&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField, D:&nbsp;DimName&gt; Mul&lt;Rotation&lt;N, D&gt;&gt; for &amp;'a Similarity&lt;N, D, Rotation&lt;N, D&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Rotation&lt;N, D&gt;&gt; for Similarity&lt;N, D, Rotation&lt;N, D&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Rotation&lt;N, D&gt;&gt; for &amp;'a Similarity&lt;N, D, Rotation&lt;N, D&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, D:&nbsp;DimName&gt; Mul&lt;Similarity&lt;N, D, Rotation&lt;N, D&gt;&gt;&gt; for Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField, D:&nbsp;DimName&gt; Mul&lt;Similarity&lt;N, D, Rotation&lt;N, D&gt;&gt;&gt; for &amp;'a Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Similarity&lt;N, D, Rotation&lt;N, D&gt;&gt;&gt; for Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Similarity&lt;N, D, Rotation&lt;N, D&gt;&gt;&gt; for &amp;'a Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; Mul&lt;Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for Similarity&lt;N, U3, UnitQuaternion&lt;N&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField&gt; Mul&lt;Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for &amp;'a Similarity&lt;N, U3, UnitQuaternion&lt;N&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for Similarity&lt;N, U3, UnitQuaternion&lt;N&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for &amp;'a Similarity&lt;N, U3, UnitQuaternion&lt;N&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; Mul&lt;Similarity&lt;N, U3, Unit&lt;Quaternion&lt;N&gt;&gt;&gt;&gt; for UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField&gt; Mul&lt;Similarity&lt;N, U3, Unit&lt;Quaternion&lt;N&gt;&gt;&gt;&gt; for &amp;'a UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Similarity&lt;N, U3, Unit&lt;Quaternion&lt;N&gt;&gt;&gt;&gt; for UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Similarity&lt;N, U3, Unit&lt;Quaternion&lt;N&gt;&gt;&gt;&gt; for &amp;'a UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; Mul&lt;Unit&lt;Complex&lt;N&gt;&gt;&gt; for Similarity&lt;N, U2, UnitComplex&lt;N&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField&gt; Mul&lt;Unit&lt;Complex&lt;N&gt;&gt;&gt; for &amp;'a Similarity&lt;N, U2, UnitComplex&lt;N&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Unit&lt;Complex&lt;N&gt;&gt;&gt; for Similarity&lt;N, U2, UnitComplex&lt;N&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Unit&lt;Complex&lt;N&gt;&gt;&gt; for &amp;'a Similarity&lt;N, U2, UnitComplex&lt;N&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategory&gt; Mul&lt;Matrix&lt;N, D, U1, &lt;DefaultAllocator as Allocator&lt;N, D, U1&gt;&gt;::Buffer&gt;&gt; for Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategory&gt; Mul&lt;Matrix&lt;N, D, U1, &lt;DefaultAllocator as Allocator&lt;N, D, U1&gt;&gt;::Buffer&gt;&gt; for &amp;'a Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategory&gt; Mul&lt;&amp;'b Matrix&lt;N, D, U1, &lt;DefaultAllocator as Allocator&lt;N, D, U1&gt;&gt;::Buffer&gt;&gt; for Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategory&gt; Mul&lt;&amp;'b Matrix&lt;N, D, U1, &lt;DefaultAllocator as Allocator&lt;N, D, U1&gt;&gt;::Buffer&gt;&gt; for &amp;'a Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategory&gt; Mul&lt;Point&lt;N, D&gt;&gt; for Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategory&gt; Mul&lt;Point&lt;N, D&gt;&gt; for &amp;'a Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategory&gt; Mul&lt;&amp;'b Point&lt;N, D&gt;&gt; for Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategory&gt; Mul&lt;&amp;'b Point&lt;N, D&gt;&gt; for &amp;'a Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, D:&nbsp;DimNameAdd&lt;U1&gt;, CA:&nbsp;TCategoryMul&lt;CB&gt;, CB:&nbsp;TCategory&gt; Mul&lt;Transform&lt;N, D, CB&gt;&gt; for Transform&lt;N, D, CA&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, D:&nbsp;DimNameAdd&lt;U1&gt;, CA:&nbsp;TCategoryMul&lt;CB&gt;, CB:&nbsp;TCategory&gt; Mul&lt;Transform&lt;N, D, CB&gt;&gt; for &amp;'a Transform&lt;N, D, CA&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, CA:&nbsp;TCategoryMul&lt;CB&gt;, CB:&nbsp;TCategory&gt; Mul&lt;&amp;'b Transform&lt;N, D, CB&gt;&gt; for Transform&lt;N, D, CA&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, CA:&nbsp;TCategoryMul&lt;CB&gt;, CB:&nbsp;TCategory&gt; Mul&lt;&amp;'b Transform&lt;N, D, CB&gt;&gt; for &amp;'a Transform&lt;N, D, CA&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;&gt; Mul&lt;Rotation&lt;N, D&gt;&gt; for Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, D&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;&gt; Mul&lt;Rotation&lt;N, D&gt;&gt; for &amp;'a Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, D&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;&gt; Mul&lt;&amp;'b Rotation&lt;N, D&gt;&gt; for Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, D&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;&gt; Mul&lt;&amp;'b Rotation&lt;N, D&gt;&gt; for &amp;'a Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, D&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;&gt; Mul&lt;Transform&lt;N, D, C&gt;&gt; for Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, DimNameSum&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;&gt; Mul&lt;Transform&lt;N, D, C&gt;&gt; for &amp;'a Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, DimNameSum&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;&gt; Mul&lt;&amp;'b Transform&lt;N, D, C&gt;&gt; for Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, DimNameSum&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;&gt; Mul&lt;&amp;'b Transform&lt;N, D, C&gt;&gt; for &amp;'a Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, DimNameSum&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, C:&nbsp;TCategoryMul&lt;TAffine&gt;&gt; Mul&lt;Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for Transform&lt;N, U3, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U4&gt; + Allocator&lt;N, U4, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, C:&nbsp;TCategoryMul&lt;TAffine&gt;&gt; Mul&lt;Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for &amp;'a Transform&lt;N, U3, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U4&gt; + Allocator&lt;N, U4, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, C:&nbsp;TCategoryMul&lt;TAffine&gt;&gt; Mul&lt;&amp;'b Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for Transform&lt;N, U3, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U4&gt; + Allocator&lt;N, U4, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N, C:&nbsp;TCategoryMul&lt;TAffine&gt;&gt; Mul&lt;&amp;'b Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for &amp;'a Transform&lt;N, U3, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U4&gt; + Allocator&lt;N, U4, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, C:&nbsp;TCategoryMul&lt;TAffine&gt;&gt; Mul&lt;Transform&lt;N, U3, C&gt;&gt; for UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U4, U4&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, C:&nbsp;TCategoryMul&lt;TAffine&gt;&gt; Mul&lt;Transform&lt;N, U3, C&gt;&gt; for &amp;'a UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U4, U4&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, C:&nbsp;TCategoryMul&lt;TAffine&gt;&gt; Mul&lt;&amp;'b Transform&lt;N, U3, C&gt;&gt; for UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U4, U4&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N, C:&nbsp;TCategoryMul&lt;TAffine&gt;&gt; Mul&lt;&amp;'b Transform&lt;N, U3, C&gt;&gt; for &amp;'a UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U4, U4&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;, R:&nbsp;SubsetOf&lt;MatrixN&lt;N, DimNameSum&lt;D, U1&gt;&gt;&gt;&gt; Mul&lt;Isometry&lt;N, D, R&gt;&gt; for Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;, R:&nbsp;SubsetOf&lt;MatrixN&lt;N, DimNameSum&lt;D, U1&gt;&gt;&gt;&gt; Mul&lt;Isometry&lt;N, D, R&gt;&gt; for &amp;'a Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;, R:&nbsp;SubsetOf&lt;MatrixN&lt;N, DimNameSum&lt;D, U1&gt;&gt;&gt;&gt; Mul&lt;&amp;'b Isometry&lt;N, D, R&gt;&gt; for Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;, R:&nbsp;SubsetOf&lt;MatrixN&lt;N, DimNameSum&lt;D, U1&gt;&gt;&gt;&gt; Mul&lt;&amp;'b Isometry&lt;N, D, R&gt;&gt; for &amp;'a Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;, R:&nbsp;SubsetOf&lt;MatrixN&lt;N, DimNameSum&lt;D, U1&gt;&gt;&gt;&gt; Mul&lt;Transform&lt;N, D, C&gt;&gt; for Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, DimNameSum&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;, R:&nbsp;SubsetOf&lt;MatrixN&lt;N, DimNameSum&lt;D, U1&gt;&gt;&gt;&gt; Mul&lt;Transform&lt;N, D, C&gt;&gt; for &amp;'a Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, DimNameSum&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;, R:&nbsp;SubsetOf&lt;MatrixN&lt;N, DimNameSum&lt;D, U1&gt;&gt;&gt;&gt; Mul&lt;&amp;'b Transform&lt;N, D, C&gt;&gt; for Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, DimNameSum&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;, R:&nbsp;SubsetOf&lt;MatrixN&lt;N, DimNameSum&lt;D, U1&gt;&gt;&gt;&gt; Mul&lt;&amp;'b Transform&lt;N, D, C&gt;&gt; for &amp;'a Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, DimNameSum&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;, R:&nbsp;SubsetOf&lt;MatrixN&lt;N, DimNameSum&lt;D, U1&gt;&gt;&gt;&gt; Mul&lt;Similarity&lt;N, D, R&gt;&gt; for Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;, R:&nbsp;SubsetOf&lt;MatrixN&lt;N, DimNameSum&lt;D, U1&gt;&gt;&gt;&gt; Mul&lt;Similarity&lt;N, D, R&gt;&gt; for &amp;'a Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;, R:&nbsp;SubsetOf&lt;MatrixN&lt;N, DimNameSum&lt;D, U1&gt;&gt;&gt;&gt; Mul&lt;&amp;'b Similarity&lt;N, D, R&gt;&gt; for Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;, R:&nbsp;SubsetOf&lt;MatrixN&lt;N, DimNameSum&lt;D, U1&gt;&gt;&gt;&gt; Mul&lt;&amp;'b Similarity&lt;N, D, R&gt;&gt; for &amp;'a Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;, R:&nbsp;SubsetOf&lt;MatrixN&lt;N, DimNameSum&lt;D, U1&gt;&gt;&gt;&gt; Mul&lt;Transform&lt;N, D, C&gt;&gt; for Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, DimNameSum&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;, R:&nbsp;SubsetOf&lt;MatrixN&lt;N, DimNameSum&lt;D, U1&gt;&gt;&gt;&gt; Mul&lt;Transform&lt;N, D, C&gt;&gt; for &amp;'a Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, DimNameSum&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;, R:&nbsp;SubsetOf&lt;MatrixN&lt;N, DimNameSum&lt;D, U1&gt;&gt;&gt;&gt; Mul&lt;&amp;'b Transform&lt;N, D, C&gt;&gt; for Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, DimNameSum&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;, R:&nbsp;SubsetOf&lt;MatrixN&lt;N, DimNameSum&lt;D, U1&gt;&gt;&gt;&gt; Mul&lt;&amp;'b Transform&lt;N, D, C&gt;&gt; for &amp;'a Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, DimNameSum&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;&gt; Mul&lt;Translation&lt;N, D&gt;&gt; for Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;&gt; Mul&lt;Translation&lt;N, D&gt;&gt; for &amp;'a Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;&gt; Mul&lt;&amp;'b Translation&lt;N, D&gt;&gt; for Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;&gt; Mul&lt;&amp;'b Translation&lt;N, D&gt;&gt; for &amp;'a Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;&gt; Mul&lt;Transform&lt;N, D, C&gt;&gt; for Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, DimNameSum&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;&gt; Mul&lt;Transform&lt;N, D, C&gt;&gt; for &amp;'a Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, DimNameSum&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;&gt; Mul&lt;&amp;'b Transform&lt;N, D, C&gt;&gt; for Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, DimNameSum&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;&gt; Mul&lt;&amp;'b Transform&lt;N, D, C&gt;&gt; for &amp;'a Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, DimNameSum&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["num_bigint"] = [{"text":"impl Mul&lt;Sign&gt; for Sign","synthetic":false,"types":[]},{"text":"impl Mul&lt;BigInt&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a BigInt&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;BigInt&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Mul&lt;&amp;'b BigInt&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a u8&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;u8&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Mul&lt;&amp;'b u8&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl Mul&lt;u8&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a u16&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;u16&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Mul&lt;&amp;'b u16&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl Mul&lt;u16&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a usize&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;usize&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Mul&lt;&amp;'b usize&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl Mul&lt;usize&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a i8&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;i8&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Mul&lt;&amp;'b i8&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl Mul&lt;i8&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a i16&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;i16&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Mul&lt;&amp;'b i16&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl Mul&lt;i16&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a isize&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;isize&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Mul&lt;&amp;'b isize&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl Mul&lt;isize&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a u32&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;u32&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Mul&lt;&amp;'b u32&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a u64&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;u64&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Mul&lt;&amp;'b u64&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a u128&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;u128&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Mul&lt;&amp;'b u128&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl Mul&lt;u32&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl Mul&lt;u64&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl Mul&lt;u128&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a i32&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;i32&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Mul&lt;&amp;'b i32&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a i64&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;i64&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Mul&lt;&amp;'b i64&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a i128&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;i128&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Mul&lt;&amp;'b i128&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl Mul&lt;i32&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl Mul&lt;i64&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl Mul&lt;i128&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl Mul&lt;BigUint&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a BigUint&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;BigUint&gt; for &amp;'a BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Mul&lt;&amp;'b BigUint&gt; for &amp;'a BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a u8&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;u8&gt; for &amp;'a BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Mul&lt;&amp;'b u8&gt; for &amp;'a BigUint","synthetic":false,"types":[]},{"text":"impl Mul&lt;u8&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a u16&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;u16&gt; for &amp;'a BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Mul&lt;&amp;'b u16&gt; for &amp;'a BigUint","synthetic":false,"types":[]},{"text":"impl Mul&lt;u16&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a usize&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;usize&gt; for &amp;'a BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Mul&lt;&amp;'b usize&gt; for &amp;'a BigUint","synthetic":false,"types":[]},{"text":"impl Mul&lt;usize&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a u32&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;u32&gt; for &amp;'a BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Mul&lt;&amp;'b u32&gt; for &amp;'a BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a u64&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;u64&gt; for &amp;'a BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Mul&lt;&amp;'b u64&gt; for &amp;'a BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a u128&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;u128&gt; for &amp;'a BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Mul&lt;&amp;'b u128&gt; for &amp;'a BigUint","synthetic":false,"types":[]},{"text":"impl Mul&lt;u32&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl Mul&lt;u64&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl Mul&lt;u128&gt; for BigUint","synthetic":false,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;'a, 'b, T:&nbsp;Clone + Num&gt; Mul&lt;&amp;'b Complex&lt;T&gt;&gt; for &amp;'a Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone + Num&gt; Mul&lt;Complex&lt;T&gt;&gt; for &amp;'a Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone + Num&gt; Mul&lt;&amp;'a Complex&lt;T&gt;&gt; for Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Num&gt; Mul&lt;Complex&lt;T&gt;&gt; for Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Num&gt; Mul&lt;T&gt; for Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone + Num&gt; Mul&lt;&amp;'a T&gt; for Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone + Num&gt; Mul&lt;T&gt; for &amp;'a Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, T:&nbsp;Clone + Num&gt; Mul&lt;&amp;'a T&gt; for &amp;'b Complex&lt;T&gt;","synthetic":false,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;'a, 'b, T:&nbsp;Clone + Integer&gt; Mul&lt;&amp;'b Ratio&lt;T&gt;&gt; for &amp;'a Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, T:&nbsp;Clone + Integer&gt; Mul&lt;&amp;'b T&gt; for &amp;'a Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Mul&lt;Ratio&lt;T&gt;&gt; for &amp;'a Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Integer,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Mul&lt;T&gt; for &amp;'a Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Integer,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Mul&lt;&amp;'a Ratio&lt;T&gt;&gt; for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Integer,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Mul&lt;&amp;'a T&gt; for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Integer,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Mul&lt;Ratio&lt;T&gt;&gt; for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Integer,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Mul&lt;T&gt; for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Integer,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["primitive_types"] = [{"text":"impl Mul&lt;U128&gt; for U128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a U128&gt; for U128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a U128&gt; for &amp;'a U128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;U128&gt; for &amp;'a U128","synthetic":false,"types":[]},{"text":"impl Mul&lt;u8&gt; for U128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a u8&gt; for U128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a u8&gt; for &amp;'a U128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;u8&gt; for &amp;'a U128","synthetic":false,"types":[]},{"text":"impl Mul&lt;u16&gt; for U128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a u16&gt; for U128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a u16&gt; for &amp;'a U128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;u16&gt; for &amp;'a U128","synthetic":false,"types":[]},{"text":"impl Mul&lt;u32&gt; for U128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a u32&gt; for U128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a u32&gt; for &amp;'a U128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;u32&gt; for &amp;'a U128","synthetic":false,"types":[]},{"text":"impl Mul&lt;u64&gt; for U128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a u64&gt; for U128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a u64&gt; for &amp;'a U128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;u64&gt; for &amp;'a U128","synthetic":false,"types":[]},{"text":"impl Mul&lt;usize&gt; for U128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a usize&gt; for U128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a usize&gt; for &amp;'a U128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;usize&gt; for &amp;'a U128","synthetic":false,"types":[]},{"text":"impl Mul&lt;i8&gt; for U128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a i8&gt; for U128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a i8&gt; for &amp;'a U128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;i8&gt; for &amp;'a U128","synthetic":false,"types":[]},{"text":"impl Mul&lt;i16&gt; for U128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a i16&gt; for U128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a i16&gt; for &amp;'a U128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;i16&gt; for &amp;'a U128","synthetic":false,"types":[]},{"text":"impl Mul&lt;i32&gt; for U128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a i32&gt; for U128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a i32&gt; for &amp;'a U128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;i32&gt; for &amp;'a U128","synthetic":false,"types":[]},{"text":"impl Mul&lt;i64&gt; for U128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a i64&gt; for U128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a i64&gt; for &amp;'a U128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;i64&gt; for &amp;'a U128","synthetic":false,"types":[]},{"text":"impl Mul&lt;isize&gt; for U128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a isize&gt; for U128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a isize&gt; for &amp;'a U128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;isize&gt; for &amp;'a U128","synthetic":false,"types":[]},{"text":"impl Mul&lt;U256&gt; for U256","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a U256&gt; for U256","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a U256&gt; for &amp;'a U256","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;U256&gt; for &amp;'a U256","synthetic":false,"types":[]},{"text":"impl Mul&lt;u8&gt; for U256","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a u8&gt; for U256","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a u8&gt; for &amp;'a U256","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;u8&gt; for &amp;'a U256","synthetic":false,"types":[]},{"text":"impl Mul&lt;u16&gt; for U256","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a u16&gt; for U256","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a u16&gt; for &amp;'a U256","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;u16&gt; for &amp;'a U256","synthetic":false,"types":[]},{"text":"impl Mul&lt;u32&gt; for U256","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a u32&gt; for U256","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a u32&gt; for &amp;'a U256","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;u32&gt; for &amp;'a U256","synthetic":false,"types":[]},{"text":"impl Mul&lt;u64&gt; for U256","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a u64&gt; for U256","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a u64&gt; for &amp;'a U256","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;u64&gt; for &amp;'a U256","synthetic":false,"types":[]},{"text":"impl Mul&lt;usize&gt; for U256","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a usize&gt; for U256","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a usize&gt; for &amp;'a U256","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;usize&gt; for &amp;'a U256","synthetic":false,"types":[]},{"text":"impl Mul&lt;i8&gt; for U256","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a i8&gt; for U256","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a i8&gt; for &amp;'a U256","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;i8&gt; for &amp;'a U256","synthetic":false,"types":[]},{"text":"impl Mul&lt;i16&gt; for U256","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a i16&gt; for U256","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a i16&gt; for &amp;'a U256","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;i16&gt; for &amp;'a U256","synthetic":false,"types":[]},{"text":"impl Mul&lt;i32&gt; for U256","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a i32&gt; for U256","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a i32&gt; for &amp;'a U256","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;i32&gt; for &amp;'a U256","synthetic":false,"types":[]},{"text":"impl Mul&lt;i64&gt; for U256","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a i64&gt; for U256","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a i64&gt; for &amp;'a U256","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;i64&gt; for &amp;'a U256","synthetic":false,"types":[]},{"text":"impl Mul&lt;isize&gt; for U256","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a isize&gt; for U256","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a isize&gt; for &amp;'a U256","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;isize&gt; for &amp;'a U256","synthetic":false,"types":[]},{"text":"impl Mul&lt;U512&gt; for U512","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a U512&gt; for U512","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a U512&gt; for &amp;'a U512","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;U512&gt; for &amp;'a U512","synthetic":false,"types":[]},{"text":"impl Mul&lt;u8&gt; for U512","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a u8&gt; for U512","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a u8&gt; for &amp;'a U512","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;u8&gt; for &amp;'a U512","synthetic":false,"types":[]},{"text":"impl Mul&lt;u16&gt; for U512","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a u16&gt; for U512","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a u16&gt; for &amp;'a U512","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;u16&gt; for &amp;'a U512","synthetic":false,"types":[]},{"text":"impl Mul&lt;u32&gt; for U512","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a u32&gt; for U512","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a u32&gt; for &amp;'a U512","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;u32&gt; for &amp;'a U512","synthetic":false,"types":[]},{"text":"impl Mul&lt;u64&gt; for U512","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a u64&gt; for U512","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a u64&gt; for &amp;'a U512","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;u64&gt; for &amp;'a U512","synthetic":false,"types":[]},{"text":"impl Mul&lt;usize&gt; for U512","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a usize&gt; for U512","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a usize&gt; for &amp;'a U512","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;usize&gt; for &amp;'a U512","synthetic":false,"types":[]},{"text":"impl Mul&lt;i8&gt; for U512","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a i8&gt; for U512","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a i8&gt; for &amp;'a U512","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;i8&gt; for &amp;'a U512","synthetic":false,"types":[]},{"text":"impl Mul&lt;i16&gt; for U512","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a i16&gt; for U512","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a i16&gt; for &amp;'a U512","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;i16&gt; for &amp;'a U512","synthetic":false,"types":[]},{"text":"impl Mul&lt;i32&gt; for U512","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a i32&gt; for U512","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a i32&gt; for &amp;'a U512","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;i32&gt; for &amp;'a U512","synthetic":false,"types":[]},{"text":"impl Mul&lt;i64&gt; for U512","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a i64&gt; for U512","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a i64&gt; for &amp;'a U512","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;i64&gt; for &amp;'a U512","synthetic":false,"types":[]},{"text":"impl Mul&lt;isize&gt; for U512","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a isize&gt; for U512","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a isize&gt; for &amp;'a U512","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;isize&gt; for &amp;'a U512","synthetic":false,"types":[]}];
implementors["secp256k1"] = [{"text":"impl Mul&lt;Field&gt; for Field","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Mul&lt;&amp;'a Field&gt; for &amp;'b Field","synthetic":false,"types":[]},{"text":"impl Mul&lt;Scalar&gt; for Scalar","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Mul&lt;&amp;'a Scalar&gt; for &amp;'b Scalar","synthetic":false,"types":[]}];
implementors["sp_arithmetic"] = [{"text":"impl Mul&lt;BigUint&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl&lt;N&gt; Mul&lt;N&gt; for Percent <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Clone + UniqueSaturatedInto&lt;u8&gt; + Rem&lt;N, Output = N&gt; + Div&lt;N, Output = N&gt; + Mul&lt;N, Output = N&gt; + Add&lt;N, Output = N&gt; + Unsigned,<br>&nbsp;&nbsp;&nbsp;&nbsp;u8: Into&lt;N&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N&gt; Mul&lt;N&gt; for PerU16 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Clone + UniqueSaturatedInto&lt;u16&gt; + Rem&lt;N, Output = N&gt; + Div&lt;N, Output = N&gt; + Mul&lt;N, Output = N&gt; + Add&lt;N, Output = N&gt; + Unsigned,<br>&nbsp;&nbsp;&nbsp;&nbsp;u16: Into&lt;N&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N&gt; Mul&lt;N&gt; for Permill <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Clone + UniqueSaturatedInto&lt;u32&gt; + Rem&lt;N, Output = N&gt; + Div&lt;N, Output = N&gt; + Mul&lt;N, Output = N&gt; + Add&lt;N, Output = N&gt; + Unsigned,<br>&nbsp;&nbsp;&nbsp;&nbsp;u32: Into&lt;N&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N&gt; Mul&lt;N&gt; for Perbill <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Clone + UniqueSaturatedInto&lt;u32&gt; + Rem&lt;N, Output = N&gt; + Div&lt;N, Output = N&gt; + Mul&lt;N, Output = N&gt; + Add&lt;N, Output = N&gt; + Unsigned,<br>&nbsp;&nbsp;&nbsp;&nbsp;u32: Into&lt;N&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N&gt; Mul&lt;N&gt; for Perquintill <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Clone + UniqueSaturatedInto&lt;u64&gt; + Rem&lt;N, Output = N&gt; + Div&lt;N, Output = N&gt; + Mul&lt;N, Output = N&gt; + Add&lt;N, Output = N&gt; + Unsigned,<br>&nbsp;&nbsp;&nbsp;&nbsp;u64: Into&lt;N&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Mul&lt;FixedI64&gt; for FixedI64","synthetic":false,"types":[]},{"text":"impl Mul&lt;FixedI128&gt; for FixedI128","synthetic":false,"types":[]},{"text":"impl Mul&lt;FixedU128&gt; for FixedU128","synthetic":false,"types":[]}];
implementors["time"] = [{"text":"impl Mul&lt;i32&gt; for Duration","synthetic":false,"types":[]}];
implementors["typenum"] = [{"text":"impl&lt;I:&nbsp;Integer&gt; Mul&lt;I&gt; for Z0","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Unsigned + NonZero&gt; Mul&lt;Z0&gt; for PInt&lt;U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Unsigned + NonZero&gt; Mul&lt;Z0&gt; for NInt&lt;U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Ul:&nbsp;Unsigned + NonZero, Ur:&nbsp;Unsigned + NonZero&gt; Mul&lt;PInt&lt;Ur&gt;&gt; for PInt&lt;Ul&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ul: Mul&lt;Ur&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Ul as Mul&lt;Ur&gt;&gt;::Output: Unsigned + NonZero,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Ul:&nbsp;Unsigned + NonZero, Ur:&nbsp;Unsigned + NonZero&gt; Mul&lt;NInt&lt;Ur&gt;&gt; for NInt&lt;Ul&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ul: Mul&lt;Ur&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Ul as Mul&lt;Ur&gt;&gt;::Output: Unsigned + NonZero,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Ul:&nbsp;Unsigned + NonZero, Ur:&nbsp;Unsigned + NonZero&gt; Mul&lt;NInt&lt;Ur&gt;&gt; for PInt&lt;Ul&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ul: Mul&lt;Ur&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Ul as Mul&lt;Ur&gt;&gt;::Output: Unsigned + NonZero,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Ul:&nbsp;Unsigned + NonZero, Ur:&nbsp;Unsigned + NonZero&gt; Mul&lt;PInt&lt;Ur&gt;&gt; for NInt&lt;Ul&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ul: Mul&lt;Ur&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Ul as Mul&lt;Ur&gt;&gt;::Output: Unsigned + NonZero,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Unsigned, B:&nbsp;Bit&gt; Mul&lt;B0&gt; for UInt&lt;U, B&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;B0&gt; for UTerm","synthetic":false,"types":[]},{"text":"impl Mul&lt;B1&gt; for UTerm","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Unsigned, B:&nbsp;Bit&gt; Mul&lt;B1&gt; for UInt&lt;U, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Unsigned, B:&nbsp;Bit&gt; Mul&lt;UTerm&gt; for UInt&lt;U, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Unsigned&gt; Mul&lt;U&gt; for UTerm","synthetic":false,"types":[]},{"text":"impl&lt;Ul:&nbsp;Unsigned, B:&nbsp;Bit, Ur:&nbsp;Unsigned&gt; Mul&lt;UInt&lt;Ur, B&gt;&gt; for UInt&lt;Ul, B0&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ul: Mul&lt;UInt&lt;Ur, B&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Ul:&nbsp;Unsigned, B:&nbsp;Bit, Ur:&nbsp;Unsigned&gt; Mul&lt;UInt&lt;Ur, B&gt;&gt; for UInt&lt;Ul, B1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ul: Mul&lt;UInt&lt;Ur, B&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;UInt&lt;Prod&lt;Ul, UInt&lt;Ur, B&gt;&gt;, B0&gt;: Add&lt;UInt&lt;Ur, B&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Rhs&gt; Mul&lt;Rhs&gt; for ATerm","synthetic":false,"types":[]},{"text":"impl&lt;V, A, Rhs&gt; Mul&lt;Rhs&gt; for TArr&lt;V, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Mul&lt;Rhs&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Mul&lt;Rhs&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rhs: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Mul&lt;ATerm&gt; for Z0","synthetic":false,"types":[]},{"text":"impl&lt;U&gt; Mul&lt;ATerm&gt; for PInt&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Unsigned + NonZero,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;U&gt; Mul&lt;ATerm&gt; for NInt&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Unsigned + NonZero,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;V, A&gt; Mul&lt;TArr&lt;V, A&gt;&gt; for Z0 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Z0: Mul&lt;A&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;V, A, U&gt; Mul&lt;TArr&lt;V, A&gt;&gt; for PInt&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Unsigned + NonZero,<br>&nbsp;&nbsp;&nbsp;&nbsp;PInt&lt;U&gt;: Mul&lt;A&gt; + Mul&lt;V&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;V, A, U&gt; Mul&lt;TArr&lt;V, A&gt;&gt; for NInt&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Unsigned + NonZero,<br>&nbsp;&nbsp;&nbsp;&nbsp;NInt&lt;U&gt;: Mul&lt;A&gt; + Mul&lt;V&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["wasmi"] = [{"text":"impl&lt;T:&nbsp;Into&lt;F32&gt;&gt; Mul&lt;T&gt; for F32","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Into&lt;F64&gt;&gt; Mul&lt;T&gt; for F64","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()