(function() {var implementors = {};
implementors["pallet_bounties"] = [{"text":"impl&lt;T:&nbsp;Config&gt; StorageMap&lt;u32, Bounty&lt;&lt;T as Config&gt;::AccountId, &lt;&lt;T as Config&lt;DefaultInstance&gt;&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance, &lt;T as Config&gt;::BlockNumber&gt;&gt; for Bounties&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl StorageMap&lt;u32, Vec&lt;u8, Global&gt;&gt; for BountyDescriptions","synthetic":false,"types":[]}];
implementors["pallet_collective"] = [{"text":"impl&lt;T:&nbsp;Config&lt;I&gt;, I:&nbsp;Instance&gt; StorageMap&lt;&lt;T as Config&gt;::Hash, &lt;T as Config&lt;I&gt;&gt;::Proposal&gt; for ProposalOf&lt;T, I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Config&lt;I&gt;, I:&nbsp;Instance&gt; StorageMap&lt;&lt;T as Config&gt;::Hash, Votes&lt;&lt;T as Config&gt;::AccountId, &lt;T as Config&gt;::BlockNumber&gt;&gt; for Voting&lt;T, I&gt;","synthetic":false,"types":[]}];
implementors["pallet_contracts"] = [{"text":"impl&lt;T:&nbsp;Config&gt; StorageMap&lt;&lt;T as Config&gt;::Hash, Vec&lt;u8, Global&gt;&gt; for PristineCode&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: UncheckedFrom&lt;T::Hash&gt; + AsRef&lt;[u8]&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Config&gt; StorageMap&lt;&lt;T as Config&gt;::Hash, PrefabWasmModule&lt;T&gt;&gt; for CodeStorage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: UncheckedFrom&lt;T::Hash&gt; + AsRef&lt;[u8]&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Config&gt; StorageMap&lt;&lt;T as Config&gt;::AccountId, ContractInfo&lt;T&gt;&gt; for ContractInfoOf&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T::AccountId: UncheckedFrom&lt;T::Hash&gt; + AsRef&lt;[u8]&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["pallet_democracy"] = [{"text":"impl&lt;T:&nbsp;Config&gt; StorageMap&lt;u32, (Vec&lt;&lt;T as Config&gt;::AccountId, Global&gt;, &lt;&lt;T as Config&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance)&gt; for DepositOf&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Config&gt; StorageMap&lt;&lt;T as Config&gt;::Hash, PreimageStatus&lt;&lt;T as Config&gt;::AccountId, &lt;&lt;T as Config&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance, &lt;T as Config&gt;::BlockNumber&gt;&gt; for Preimages&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Config&gt; StorageMap&lt;u32, ReferendumInfo&lt;&lt;T as Config&gt;::BlockNumber, &lt;T as Config&gt;::Hash, &lt;&lt;T as Config&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance&gt;&gt; for ReferendumInfoOf&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Config&gt; StorageMap&lt;&lt;T as Config&gt;::AccountId, Voting&lt;&lt;&lt;T as Config&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance, &lt;T as Config&gt;::AccountId, &lt;T as Config&gt;::BlockNumber&gt;&gt; for VotingOf&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Config&gt; StorageMap&lt;&lt;T as Config&gt;::AccountId, &lt;T as Config&gt;::BlockNumber&gt; for Locks&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Config&gt; StorageMap&lt;&lt;T as Config&gt;::Hash, (&lt;T as Config&gt;::BlockNumber, Vec&lt;&lt;T as Config&gt;::AccountId, Global&gt;)&gt; for Blacklist&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Config&gt; StorageMap&lt;&lt;T as Config&gt;::Hash, bool&gt; for Cancellations&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pallet_elections"] = [{"text":"impl&lt;T:&nbsp;Config&gt; StorageMap&lt;(&lt;T as Config&gt;::AccountId, u32), Vec&lt;u32, Global&gt;&gt; for ApprovalsOf&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Config&gt; StorageMap&lt;&lt;T as Config&gt;::AccountId, (u32, u32)&gt; for RegisterInfoOf&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Config&gt; StorageMap&lt;&lt;T as Config&gt;::AccountId, VoterInfo&lt;&lt;&lt;T as Config&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance&gt;&gt; for VoterInfoOf&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Config&gt; StorageMap&lt;u32, Vec&lt;Option&lt;&lt;T as Config&gt;::AccountId&gt;, Global&gt;&gt; for Voters&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pallet_elections_phragmen"] = [{"text":"impl&lt;T:&nbsp;Config&gt; StorageMap&lt;&lt;T as Config&gt;::AccountId, Voter&lt;&lt;T as Config&gt;::AccountId, &lt;&lt;T as Config&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance&gt;&gt; for Voting&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pallet_identity"] = [{"text":"impl&lt;T:&nbsp;Config&gt; StorageMap&lt;&lt;T as Config&gt;::AccountId, Registration&lt;&lt;&lt;T as Config&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance&gt;&gt; for IdentityOf&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Config&gt; StorageMap&lt;&lt;T as Config&gt;::AccountId, (&lt;T as Config&gt;::AccountId, Data)&gt; for SuperOf&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Config&gt; StorageMap&lt;&lt;T as Config&gt;::AccountId, (&lt;&lt;T as Config&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance, Vec&lt;&lt;T as Config&gt;::AccountId, Global&gt;)&gt; for SubsOf&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pallet_indices"] = [{"text":"impl&lt;T:&nbsp;Config&gt; StorageMap&lt;&lt;T as Config&gt;::AccountIndex, (&lt;T as Config&gt;::AccountId, &lt;&lt;T as Config&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance, bool)&gt; for Accounts&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pallet_mmr"] = [{"text":"impl&lt;T:&nbsp;Config&lt;I&gt;, I:&nbsp;Instance&gt; StorageMap&lt;u64, &lt;T as Config&lt;I&gt;&gt;::Hash&gt; for Nodes&lt;T, I&gt;","synthetic":false,"types":[]}];
implementors["pallet_multisig"] = [{"text":"impl&lt;T:&nbsp;Config&gt; StorageMap&lt;[u8; 32], (Vec&lt;u8, Global&gt;, &lt;T as Config&gt;::AccountId, &lt;&lt;T as Config&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance)&gt; for Calls&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pallet_node_authorization"] = [{"text":"impl&lt;T:&nbsp;Config&gt; StorageMap&lt;OpaquePeerId, &lt;T as Config&gt;::AccountId&gt; for Owners&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl StorageMap&lt;OpaquePeerId, BTreeSet&lt;OpaquePeerId&gt;&gt; for AdditionalConnections","synthetic":false,"types":[]}];
implementors["pallet_proxy"] = [{"text":"impl&lt;T:&nbsp;Config&gt; StorageMap&lt;&lt;T as Config&gt;::AccountId, (Vec&lt;ProxyDefinition&lt;&lt;T as Config&gt;::AccountId, &lt;T as Config&gt;::ProxyType, &lt;T as Config&gt;::BlockNumber&gt;, Global&gt;, &lt;&lt;T as Config&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance)&gt; for Proxies&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Config&gt; StorageMap&lt;&lt;T as Config&gt;::AccountId, (Vec&lt;Announcement&lt;&lt;T as Config&gt;::AccountId, &lt;&lt;T as Config&gt;::CallHasher as Hash&gt;::Output, &lt;T as Config&gt;::BlockNumber&gt;, Global&gt;, &lt;&lt;T as Config&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance)&gt; for Announcements&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pallet_recovery"] = [{"text":"impl&lt;T:&nbsp;Config&gt; StorageMap&lt;&lt;T as Config&gt;::AccountId, RecoveryConfig&lt;&lt;T as Config&gt;::BlockNumber, &lt;&lt;T as Config&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance, &lt;T as Config&gt;::AccountId&gt;&gt; for Recoverable&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Config&gt; StorageMap&lt;&lt;T as Config&gt;::AccountId, &lt;T as Config&gt;::AccountId&gt; for Proxy&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pallet_scheduler"] = [{"text":"impl&lt;T:&nbsp;Config&gt; StorageMap&lt;&lt;T as Config&gt;::BlockNumber, Vec&lt;Option&lt;ScheduledV2&lt;&lt;T as Config&gt;::Call, &lt;T as Config&gt;::BlockNumber, &lt;T as Config&gt;::PalletsOrigin, &lt;T as Config&gt;::AccountId&gt;&gt;, Global&gt;&gt; for Agenda&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pallet_society"] = [{"text":"impl&lt;T:&nbsp;Config&lt;I&gt;, I:&nbsp;Instance&gt; StorageMap&lt;&lt;T as Config&gt;::AccountId, (&lt;&lt;T as Config&lt;I&gt;&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance, BidKind&lt;&lt;T as Config&gt;::AccountId, &lt;&lt;T as Config&lt;I&gt;&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance&gt;)&gt; for SuspendedCandidates&lt;T, I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Config&lt;I&gt;, I:&nbsp;Instance&gt; StorageMap&lt;&lt;T as Config&gt;::AccountId, bool&gt; for SuspendedMembers&lt;T, I&gt;","synthetic":false,"types":[]}];
implementors["pallet_staking"] = [{"text":"impl&lt;T:&nbsp;Config&gt; StorageMap&lt;&lt;T as Config&gt;::AccountId, &lt;T as Config&gt;::AccountId&gt; for Bonded&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Config&gt; StorageMap&lt;&lt;T as Config&gt;::AccountId, StakingLedger&lt;&lt;T as Config&gt;::AccountId, &lt;&lt;T as Config&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance&gt;&gt; for Ledger&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Config&gt; StorageMap&lt;&lt;T as Config&gt;::AccountId, RewardDestination&lt;&lt;T as Config&gt;::AccountId&gt;&gt; for Payee&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Config&gt; StorageMap&lt;&lt;T as Config&gt;::AccountId, ValidatorPrefs&gt; for Validators&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Config&gt; StorageMap&lt;&lt;T as Config&gt;::AccountId, Nominations&lt;&lt;T as Config&gt;::AccountId&gt;&gt; for Nominators&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl StorageMap&lt;u32, u32&gt; for ErasStartSessionIndex","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Config&gt; StorageMap&lt;u32, &lt;&lt;T as Config&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance&gt; for ErasValidatorReward&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Config&gt; StorageMap&lt;u32, EraRewardPoints&lt;&lt;T as Config&gt;::AccountId&gt;&gt; for ErasRewardPoints&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Config&gt; StorageMap&lt;u32, &lt;&lt;T as Config&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance&gt; for ErasTotalStake&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Config&gt; StorageMap&lt;u32, Vec&lt;UnappliedSlash&lt;&lt;T as Config&gt;::AccountId, &lt;&lt;T as Config&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance&gt;, Global&gt;&gt; for UnappliedSlashes&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pallet_tips"] = [{"text":"impl&lt;T:&nbsp;Config&gt; StorageMap&lt;&lt;T as Config&gt;::Hash, OpenTip&lt;&lt;T as Config&gt;::AccountId, &lt;&lt;T as Config&lt;DefaultInstance&gt;&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance, &lt;T as Config&gt;::BlockNumber, &lt;T as Config&gt;::Hash&gt;&gt; for Tips&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Config&gt; StorageMap&lt;&lt;T as Config&gt;::Hash, Vec&lt;u8, Global&gt;&gt; for Reasons&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pallet_treasury"] = [{"text":"impl&lt;T:&nbsp;Config&lt;I&gt;, I:&nbsp;Instance&gt; StorageMap&lt;u32, Proposal&lt;&lt;T as Config&gt;::AccountId, &lt;&lt;T as Config&lt;I&gt;&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance&gt;&gt; for Proposals&lt;T, I&gt;","synthetic":false,"types":[]}];
implementors["pallet_vesting"] = [{"text":"impl&lt;T:&nbsp;Config&gt; StorageMap&lt;&lt;T as Config&gt;::AccountId, VestingInfo&lt;&lt;&lt;T as Config&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance, &lt;T as Config&gt;::BlockNumber&gt;&gt; for Vesting&lt;T&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()