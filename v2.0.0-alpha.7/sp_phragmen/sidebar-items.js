initSidebarItems({"enum":[["Error","The errors that might occur in the this crate and compact."]],"fn":[["assignment_ratio_to_staked","Converts a vector of ratio assignments into ones with absolute budget value."],["assignment_staked_to_ratio","Converts a vector of staked assignments into ones with ratio values."],["build_support_map","Build the support map from the given phragmen result. It maps a flat structure like"],["elect","Perform election based on Phragm√©n algorithm."],["equalize","Performs equalize post-processing to the output of the election algorithm. This happens in rounds. The number of rounds and the maximum diff-per-round tolerance can be tuned through input parameters."],["evaluate_support","Evaluate a phragmen result, given the support map. The returned tuple contains:"],["is_score_better","Compares two sets of phragmen scores based on desirability and returns true if `that` is better than `this`."],["reduce","Reduce the given [`PhragmenResult`]. This removes redundant edges from without changing the overall backing of any of the elected candidates."],["to_without_backing","consumes a vector of winners with backing stake to just winners."]],"macro":[["generate_compact_solution_type","Generates a struct to store the phragmen assignments in a compact way. The struct can only store distributions up to the given input count. The given count must be greater than 2."]],"struct":[["Assignment","A voter's stake assignment among a set of targets, represented as ratios."],["PhragmenResult","Final result of the phragmen election."],["StakedAssignment","A voter's stake assignment among a set of targets, represented as absolute values in the scale of [`ExtendedBalance`]."],["Support","A structure to demonstrate the phragmen result from the perspective of the candidate, i.e. how much support each candidate is receiving."]],"trait":[["IdentifierT","an aggregator trait for a generic type of a voter/target identifier. This usually maps to substrate's account id."],["VotingLimit","A trait to limit the number of votes per voter. The generated compact type will implement this."]],"type":[["ExtendedBalance","A type in which performing operations on vote weights are safe."],["PhragmenScore","The score of an assignment. This can be computed from the support map via [`evaluate_support`]."],["SupportMap","A linkage from a candidate and its [`Support`]."],["VoteWeight","A type which is used in the API of this crate as a numeric weight of a vote, most often the stake of the voter. It is always converted to [`ExtendedBalance`] for computation."],["WithApprovalOf","A winner, with their respective approval stake."]]});