var ALIASES = {};
ALIASES["adler32"] = {};
ALIASES["aes_ctr"] = {};
ALIASES["aes_soft"] = {};
ALIASES["ahash"] = {};
ALIASES["aho_corasick"] = {};
ALIASES["alga"] = {};
ALIASES["ansi_term"] = {};
ALIASES["anyhow"] = {};
ALIASES["app_dirs"] = {};
ALIASES["approx"] = {};
ALIASES["arbitrary"] = {};
ALIASES["arc_swap"] = {};
ALIASES["arrayref"] = {};
ALIASES["arrayvec"] = {};
ALIASES["asn1_der"] = {};
ALIASES["asn1_der_derive"] = {};
ALIASES["assert_matches"] = {};
ALIASES["async_std"] = {};
ALIASES["async_task"] = {};
ALIASES["async_tls"] = {};
ALIASES["atty"] = {};
ALIASES["backtrace"] = {};
ALIASES["backtrace_sys"] = {};
ALIASES["base58"] = {};
ALIASES["base64"] = {};
ALIASES["biguint"] = {};
ALIASES["bincode"] = {};
ALIASES["bip39"] = {};
ALIASES["bitflags"] = {};
ALIASES["bitmask"] = {};
ALIASES["bitvec"] = {};
ALIASES["blake2"] = {};
ALIASES["blake2_rfc"] = {};
ALIASES["blake2b_simd"] = {};
ALIASES["blake2s_simd"] = {};
ALIASES["block_buffer"] = {};
ALIASES["block_cipher_trait"] = {};
ALIASES["block_padding"] = {};
ALIASES["broadcaster"] = {};
ALIASES["bs58"] = {};
ALIASES["bstr"] = {};
ALIASES["build_helper"] = {};
ALIASES["bumpalo"] = {};
ALIASES["byte_slice_cast"] = {};
ALIASES["byte_tools"] = {};
ALIASES["byteorder"] = {};
ALIASES["bytes"] = {};
ALIASES["c_linked_list"] = {};
ALIASES["cargo_metadata"] = {};
ALIASES["cfg_if"] = {};
ALIASES["chacha20_poly1305_aead"] = {};
ALIASES["chain_spec_builder"] = {};
ALIASES["chrono"] = {};
ALIASES["clap"] = {};
ALIASES["clear_on_drop"] = {};
ALIASES["console_error_panic_hook"] = {};
ALIASES["console_log"] = {};
ALIASES["const_random"] = {};
ALIASES["const_random_macro"] = {};
ALIASES["constant_time_eq"] = {};
ALIASES["cranelift_bforest"] = {};
ALIASES["cranelift_codegen"] = {};
ALIASES["cranelift_codegen_shared"] = {};
ALIASES["cranelift_entity"] = {};
ALIASES["cranelift_frontend"] = {};
ALIASES["cranelift_native"] = {};
ALIASES["cranelift_wasm"] = {};
ALIASES["crc32fast"] = {};
ALIASES["crossbeam_channel"] = {};
ALIASES["crossbeam_deque"] = {};
ALIASES["crossbeam_epoch"] = {};
ALIASES["crossbeam_queue"] = {};
ALIASES["crossbeam_utils"] = {};
ALIASES["crunchy"] = {};
ALIASES["crypto_mac"] = {};
ALIASES["ct_logs"] = {};
ALIASES["ctr"] = {};
ALIASES["cuckoofilter"] = {};
ALIASES["curve25519_dalek"] = {};
ALIASES["data_encoding"] = {};
ALIASES["derive_more"] = {};
ALIASES["difference"] = {};
ALIASES["digest"] = {};
ALIASES["directories"] = {};
ALIASES["dirs_sys"] = {};
ALIASES["dns_parser"] = {};
ALIASES["doc_comment"] = {};
ALIASES["ed25519_dalek"] = {};
ALIASES["either"] = {};
ALIASES["enumflags2"] = {};
ALIASES["enumflags2_derive"] = {};
ALIASES["env_logger"] = {};
ALIASES["environmental"] = {};
ALIASES["equalize"] = {};
ALIASES["erased_serde"] = {};
ALIASES["errno"] = {};
ALIASES["evm"] = {};
ALIASES["evm_core"] = {};
ALIASES["evm_gasometer"] = {};
ALIASES["evm_runtime"] = {};
ALIASES["exit_future"] = {};
ALIASES["faerie"] = {};
ALIASES["failure"] = {};
ALIASES["failure_derive"] = {};
ALIASES["fake_simd"] = {};
ALIASES["fallible_iterator"] = {};
ALIASES["fdlimit"] = {};
ALIASES["file_per_thread_logger"] = {};
ALIASES["finality_grandpa"] = {};
ALIASES["fixed_hash"] = {};
ALIASES["flate2"] = {};
ALIASES["fnv"] = {};
ALIASES["fork_tree"] = {};
ALIASES["frame_benchmarking"] = {};
ALIASES["frame_benchmarking_cli"] = {};
ALIASES["frame_executive"] = {};
ALIASES["frame_metadata"] = {};
ALIASES["frame_support"] = {"!=":[{'crate':'frame_support','ty':8,'name':'Eq','desc':'Trait for equality comparisons which are equivalence…','p':'frame_support::dispatch'},{'crate':'frame_support','ty':8,'name':'PartialEq','desc':'Trait for equality comparisons which are partial…','p':'frame_support::dispatch'}],"{}":[{'crate':'frame_support','ty':8,'name':'Display','desc':'Format trait for an empty format, `{}`.','p':'frame_support::dispatch::fmt'}],"{:?}":[{'crate':'frame_support','ty':8,'name':'Debug','desc':'`?` formatting.','p':'frame_support::dispatch::fmt'}],"==":[{'crate':'frame_support','ty':8,'name':'Eq','desc':'Trait for equality comparisons which are equivalence…','p':'frame_support::dispatch'},{'crate':'frame_support','ty':8,'name':'PartialEq','desc':'Trait for equality comparisons which are partial…','p':'frame_support::dispatch'}],};
ALIASES["frame_support_procedural"] = {};
ALIASES["frame_support_procedural_tools"] = {};
ALIASES["frame_support_procedural_tools_derive"] = {};
ALIASES["frame_support_test"] = {};
ALIASES["frame_system"] = {};
ALIASES["frame_system_benchmarking"] = {};
ALIASES["frame_system_rpc_runtime_api"] = {};
ALIASES["fs2"] = {};
ALIASES["fs_extra"] = {};
ALIASES["fs_swap"] = {};
ALIASES["futures"] = {};
ALIASES["futures_channel"] = {};
ALIASES["futures_codec"] = {};
ALIASES["futures_core"] = {};
ALIASES["futures_cpupool"] = {};
ALIASES["futures_diagnose"] = {};
ALIASES["futures_executor"] = {};
ALIASES["futures_io"] = {};
ALIASES["futures_macro"] = {};
ALIASES["futures_sink"] = {};
ALIASES["futures_task"] = {};
ALIASES["futures_timer"] = {};
ALIASES["futures_util"] = {};
ALIASES["generic_array"] = {};
ALIASES["get_if_addrs"] = {};
ALIASES["getrandom"] = {};
ALIASES["gimli"] = {};
ALIASES["glob"] = {};
ALIASES["globset"] = {};
ALIASES["gloo_timers"] = {};
ALIASES["goblin"] = {};
ALIASES["h2"] = {};
ALIASES["hash256_std_hasher"] = {};
ALIASES["hash_db"] = {};
ALIASES["hashbrown"] = {};
ALIASES["heck"] = {};
ALIASES["hex"] = {};
ALIASES["hex_literal"] = {};
ALIASES["hex_literal_impl"] = {};
ALIASES["hmac"] = {};
ALIASES["hmac_drbg"] = {};
ALIASES["honggfuzz"] = {};
ALIASES["http"] = {};
ALIASES["http_body"] = {};
ALIASES["httparse"] = {};
ALIASES["humantime"] = {};
ALIASES["hyper"] = {};
ALIASES["hyper_rustls"] = {};
ALIASES["idna"] = {};
ALIASES["impl_codec"] = {};
ALIASES["impl_rlp"] = {};
ALIASES["impl_serde"] = {};
ALIASES["impl_trait_for_tuples"] = {};
ALIASES["indexmap"] = {};
ALIASES["inflector"] = {};
ALIASES["integer_sqrt"] = {};
ALIASES["interleaved_ordered"] = {};
ALIASES["intervalier"] = {};
ALIASES["iovec"] = {};
ALIASES["ip_network"] = {};
ALIASES["ipnet"] = {};
ALIASES["itertools"] = {};
ALIASES["itoa"] = {};
ALIASES["js_sys"] = {};
ALIASES["jsonrpc_client_transports"] = {};
ALIASES["jsonrpc_core"] = {};
ALIASES["jsonrpc_core_client"] = {};
ALIASES["jsonrpc_derive"] = {};
ALIASES["jsonrpc_http_server"] = {};
ALIASES["jsonrpc_pubsub"] = {};
ALIASES["jsonrpc_server_utils"] = {};
ALIASES["jsonrpc_ws_server"] = {};
ALIASES["keccak"] = {};
ALIASES["kv_log_macro"] = {};
ALIASES["kvdb"] = {};
ALIASES["kvdb_memorydb"] = {};
ALIASES["kvdb_rocksdb"] = {};
ALIASES["kvdb_web"] = {};
ALIASES["lazy_static"] = {};
ALIASES["lazycell"] = {};
ALIASES["leb128"] = {};
ALIASES["libc"] = {};
ALIASES["libflate"] = {};
ALIASES["libm"] = {};
ALIASES["libp2p"] = {};
ALIASES["libp2p_core"] = {};
ALIASES["libp2p_core_derive"] = {};
ALIASES["libp2p_deflate"] = {};
ALIASES["libp2p_dns"] = {};
ALIASES["libp2p_floodsub"] = {};
ALIASES["libp2p_gossipsub"] = {};
ALIASES["libp2p_identify"] = {};
ALIASES["libp2p_kad"] = {};
ALIASES["libp2p_mdns"] = {};
ALIASES["libp2p_mplex"] = {};
ALIASES["libp2p_noise"] = {};
ALIASES["libp2p_ping"] = {};
ALIASES["libp2p_plaintext"] = {};
ALIASES["libp2p_pnet"] = {};
ALIASES["libp2p_secio"] = {};
ALIASES["libp2p_swarm"] = {};
ALIASES["libp2p_tcp"] = {};
ALIASES["libp2p_uds"] = {};
ALIASES["libp2p_wasm_ext"] = {};
ALIASES["libp2p_websocket"] = {};
ALIASES["libp2p_yamux"] = {};
ALIASES["librocksdb_sys"] = {};
ALIASES["libz_sys"] = {};
ALIASES["linked_hash_map"] = {};
ALIASES["linked_hash_set"] = {};
ALIASES["linregress"] = {};
ALIASES["lite_json"] = {};
ALIASES["lock_api"] = {};
ALIASES["log"] = {};
ALIASES["lru"] = {};
ALIASES["matches"] = {};
ALIASES["matrixmultiply"] = {};
ALIASES["maybe_uninit"] = {};
ALIASES["memchr"] = {};
ALIASES["memmap"] = {};
ALIASES["memoffset"] = {};
ALIASES["memory_db"] = {};
ALIASES["memory_units"] = {};
ALIASES["merlin"] = {};
ALIASES["miniz_oxide"] = {};
ALIASES["mio"] = {};
ALIASES["mio_extras"] = {};
ALIASES["mio_uds"] = {};
ALIASES["more_asserts"] = {};
ALIASES["multihash"] = {};
ALIASES["multistream_select"] = {};
ALIASES["nalgebra"] = {};
ALIASES["names"] = {};
ALIASES["net2"] = {};
ALIASES["netstat2"] = {};
ALIASES["nix"] = {};
ALIASES["node_bench"] = {};
ALIASES["node_browser_testing"] = {};
ALIASES["node_cli"] = {};
ALIASES["node_executor"] = {};
ALIASES["node_inspect"] = {};
ALIASES["node_primitives"] = {};
ALIASES["node_rpc"] = {};
ALIASES["node_rpc_client"] = {};
ALIASES["node_runtime"] = {};
ALIASES["node_template"] = {};
ALIASES["node_template_runtime"] = {};
ALIASES["node_testing"] = {};
ALIASES["nodrop"] = {};
ALIASES["nohash_hasher"] = {};
ALIASES["num_bigint"] = {};
ALIASES["num_complex"] = {};
ALIASES["num_cpus"] = {};
ALIASES["num_integer"] = {};
ALIASES["num_rational"] = {};
ALIASES["num_traits"] = {};
ALIASES["object"] = {};
ALIASES["once_cell"] = {};
ALIASES["opaque_debug"] = {};
ALIASES["openssl_probe"] = {};
ALIASES["owning_ref"] = {};
ALIASES["pallet_assets"] = {};
ALIASES["pallet_aura"] = {};
ALIASES["pallet_authority_discovery"] = {};
ALIASES["pallet_authorship"] = {};
ALIASES["pallet_babe"] = {};
ALIASES["pallet_balances"] = {};
ALIASES["pallet_benchmark"] = {};
ALIASES["pallet_collective"] = {};
ALIASES["pallet_contracts"] = {};
ALIASES["pallet_contracts_primitives"] = {};
ALIASES["pallet_contracts_rpc"] = {};
ALIASES["pallet_contracts_rpc_runtime_api"] = {};
ALIASES["pallet_democracy"] = {};
ALIASES["pallet_elections"] = {};
ALIASES["pallet_elections_phragmen"] = {};
ALIASES["pallet_evm"] = {};
ALIASES["pallet_example"] = {};
ALIASES["pallet_example_offchain_worker"] = {};
ALIASES["pallet_finality_tracker"] = {};
ALIASES["pallet_generic_asset"] = {};
ALIASES["pallet_grandpa"] = {};
ALIASES["pallet_identity"] = {};
ALIASES["pallet_im_online"] = {};
ALIASES["pallet_indices"] = {};
ALIASES["pallet_membership"] = {};
ALIASES["pallet_nicks"] = {};
ALIASES["pallet_offences"] = {};
ALIASES["pallet_offences_benchmarking"] = {};
ALIASES["pallet_randomness_collective_flip"] = {};
ALIASES["pallet_recovery"] = {};
ALIASES["pallet_scheduler"] = {};
ALIASES["pallet_scored_pool"] = {};
ALIASES["pallet_session"] = {};
ALIASES["pallet_session_benchmarking"] = {};
ALIASES["pallet_society"] = {};
ALIASES["pallet_staking"] = {};
ALIASES["pallet_staking_reward_curve"] = {};
ALIASES["pallet_sudo"] = {};
ALIASES["pallet_template"] = {};
ALIASES["pallet_timestamp"] = {};
ALIASES["pallet_transaction_payment"] = {};
ALIASES["pallet_transaction_payment_rpc"] = {};
ALIASES["pallet_transaction_payment_rpc_runtime_api"] = {};
ALIASES["pallet_treasury"] = {};
ALIASES["pallet_utility"] = {};
ALIASES["pallet_vesting"] = {};
ALIASES["parity_db"] = {};
ALIASES["parity_multiaddr"] = {};
ALIASES["parity_multihash"] = {};
ALIASES["parity_scale_codec"] = {};
ALIASES["parity_scale_codec_derive"] = {};
ALIASES["parity_send_wrapper"] = {};
ALIASES["parity_util_mem"] = {};
ALIASES["parity_util_mem_derive"] = {};
ALIASES["parity_wasm"] = {};
ALIASES["parking_lot"] = {};
ALIASES["parking_lot_core"] = {};
ALIASES["paste"] = {};
ALIASES["paste_impl"] = {};
ALIASES["pbkdf2"] = {};
ALIASES["pdqselect"] = {};
ALIASES["per_thing_rational"] = {};
ALIASES["percent_encoding"] = {};
ALIASES["pin_project"] = {};
ALIASES["pin_project_internal"] = {};
ALIASES["pin_project_lite"] = {};
ALIASES["pin_utils"] = {};
ALIASES["plain"] = {};
ALIASES["platforms"] = {};
ALIASES["ppv_lite86"] = {};
ALIASES["pretty_assertions"] = {};
ALIASES["primitive_types"] = {};
ALIASES["proc_macro2"] = {};
ALIASES["proc_macro_crate"] = {};
ALIASES["proc_macro_error"] = {};
ALIASES["proc_macro_error_attr"] = {};
ALIASES["proc_macro_hack"] = {};
ALIASES["proc_macro_nested"] = {};
ALIASES["procfs"] = {};
ALIASES["prometheus"] = {};
ALIASES["prost"] = {};
ALIASES["prost_derive"] = {};
ALIASES["protobuf"] = {};
ALIASES["pwasm_utils"] = {};
ALIASES["quick_error"] = {};
ALIASES["quicksink"] = {};
ALIASES["quote"] = {};
ALIASES["radium"] = {};
ALIASES["rand"] = {};
ALIASES["rand_chacha"] = {};
ALIASES["rand_core"] = {};
ALIASES["rand_hc"] = {};
ALIASES["rand_isaac"] = {};
ALIASES["rand_jitter"] = {};
ALIASES["rand_os"] = {};
ALIASES["rand_pcg"] = {};
ALIASES["rand_xorshift"] = {};
ALIASES["rational128"] = {};
ALIASES["raw_cpuid"] = {};
ALIASES["rawpointer"] = {};
ALIASES["rayon"] = {};
ALIASES["rayon_core"] = {};
ALIASES["reduce"] = {};
ALIASES["ref_cast"] = {};
ALIASES["ref_cast_impl"] = {};
ALIASES["regalloc"] = {};
ALIASES["regex"] = {};
ALIASES["regex_automata"] = {};
ALIASES["regex_syntax"] = {};
ALIASES["region"] = {};
ALIASES["remove_dir_all"] = {};
ALIASES["ring"] = {};
ALIASES["rle_decode_fast"] = {};
ALIASES["rlp"] = {};
ALIASES["rocksdb"] = {};
ALIASES["rpassword"] = {};
ALIASES["rustc_demangle"] = {};
ALIASES["rustc_hash"] = {};
ALIASES["rustc_hex"] = {};
ALIASES["rustls"] = {};
ALIASES["rustls_native_certs"] = {};
ALIASES["rustversion"] = {};
ALIASES["rw_stream_sink"] = {};
ALIASES["ryu"] = {};
ALIASES["safe_mix"] = {};
ALIASES["salsa20"] = {};
ALIASES["salsa20_core"] = {};
ALIASES["same_file"] = {};
ALIASES["sc_authority_discovery"] = {};
ALIASES["sc_basic_authorship"] = {};
ALIASES["sc_block_builder"] = {};
ALIASES["sc_chain_spec"] = {};
ALIASES["sc_chain_spec_derive"] = {};
ALIASES["sc_cli"] = {};
ALIASES["sc_client_api"] = {};
ALIASES["sc_client_db"] = {};
ALIASES["sc_consensus"] = {};
ALIASES["sc_consensus_aura"] = {};
ALIASES["sc_consensus_babe"] = {};
ALIASES["sc_consensus_babe_rpc"] = {};
ALIASES["sc_consensus_epochs"] = {};
ALIASES["sc_consensus_manual_seal"] = {};
ALIASES["sc_consensus_pow"] = {};
ALIASES["sc_consensus_slots"] = {};
ALIASES["sc_consensus_uncles"] = {};
ALIASES["sc_executor"] = {};
ALIASES["sc_executor_common"] = {};
ALIASES["sc_executor_wasmi"] = {};
ALIASES["sc_executor_wasmtime"] = {};
ALIASES["sc_finality_grandpa"] = {};
ALIASES["sc_finality_grandpa_rpc"] = {};
ALIASES["sc_informant"] = {};
ALIASES["sc_keystore"] = {};
ALIASES["sc_network"] = {};
ALIASES["sc_network_gossip"] = {};
ALIASES["sc_network_test"] = {};
ALIASES["sc_offchain"] = {};
ALIASES["sc_peerset"] = {};
ALIASES["sc_rpc"] = {};
ALIASES["sc_rpc_api"] = {};
ALIASES["sc_rpc_server"] = {};
ALIASES["sc_runtime_test"] = {};
ALIASES["sc_service"] = {};
ALIASES["sc_service_test"] = {};
ALIASES["sc_state_db"] = {};
ALIASES["sc_telemetry"] = {};
ALIASES["sc_tracing"] = {};
ALIASES["sc_transaction_graph"] = {};
ALIASES["sc_transaction_pool"] = {};
ALIASES["schnorrkel"] = {};
ALIASES["scoped_tls"] = {};
ALIASES["scopeguard"] = {};
ALIASES["scroll"] = {};
ALIASES["scroll_derive"] = {};
ALIASES["sct"] = {};
ALIASES["secp256k1"] = {};
ALIASES["semver"] = {};
ALIASES["semver_parser"] = {};
ALIASES["send_wrapper"] = {};
ALIASES["serde"] = {};
ALIASES["serde_derive"] = {};
ALIASES["serde_json"] = {};
ALIASES["sha1"] = {};
ALIASES["sha2"] = {};
ALIASES["sha3"] = {};
ALIASES["signal_hook_registry"] = {};
ALIASES["slab"] = {};
ALIASES["slog"] = {};
ALIASES["slog_derive"] = {};
ALIASES["slog_json"] = {};
ALIASES["slog_scope"] = {};
ALIASES["smallvec"] = {};
ALIASES["snow"] = {};
ALIASES["soketto"] = {};
ALIASES["sp_allocator"] = {};
ALIASES["sp_api"] = {};
ALIASES["sp_api_proc_macro"] = {};
ALIASES["sp_application_crypto"] = {};
ALIASES["sp_application_crypto_test"] = {};
ALIASES["sp_arithmetic"] = {};
ALIASES["sp_authority_discovery"] = {};
ALIASES["sp_authorship"] = {};
ALIASES["sp_block_builder"] = {};
ALIASES["sp_blockchain"] = {};
ALIASES["sp_chain_spec"] = {};
ALIASES["sp_consensus"] = {};
ALIASES["sp_consensus_aura"] = {};
ALIASES["sp_consensus_babe"] = {};
ALIASES["sp_consensus_pow"] = {};
ALIASES["sp_consensus_vrf"] = {};
ALIASES["sp_core"] = {};
ALIASES["sp_database"] = {};
ALIASES["sp_debug_derive"] = {};
ALIASES["sp_externalities"] = {};
ALIASES["sp_finality_grandpa"] = {};
ALIASES["sp_finality_tracker"] = {};
ALIASES["sp_inherents"] = {};
ALIASES["sp_io"] = {};
ALIASES["sp_keyring"] = {};
ALIASES["sp_offchain"] = {};
ALIASES["sp_panic_handler"] = {};
ALIASES["sp_phragmen"] = {};
ALIASES["sp_phragmen_compact"] = {};
ALIASES["sp_rpc"] = {};
ALIASES["sp_runtime"] = {};
ALIASES["sp_runtime_interface"] = {};
ALIASES["sp_runtime_interface_proc_macro"] = {};
ALIASES["sp_runtime_interface_test"] = {};
ALIASES["sp_runtime_interface_test_wasm"] = {};
ALIASES["sp_runtime_interface_test_wasm_deprecated"] = {};
ALIASES["sp_sandbox"] = {};
ALIASES["sp_serializer"] = {};
ALIASES["sp_session"] = {};
ALIASES["sp_staking"] = {};
ALIASES["sp_state_machine"] = {};
ALIASES["sp_std"] = {"?":[{'crate':'sp_std','ty':8,'name':'Try','desc':'A trait for customizing the behavior of the `?` operator.','p':'sp_std::ops'}],"*":[{'crate':'sp_std','ty':8,'name':'Mul','desc':'The multiplication operator `*`.','p':'sp_std::ops'},{'crate':'sp_std','ty':8,'name':'MulAssign','desc':'The multiplication assignment operator `*=`.','p':'sp_std::ops'},{'crate':'sp_std','ty':8,'name':'Deref','desc':'Used for immutable dereferencing operations, like `*v`.','p':'sp_std::ops'},{'crate':'sp_std','ty':8,'name':'DerefMut','desc':'Used for mutable dereferencing operations, like in `*v =…','p':'sp_std::ops'}],">=":[{'crate':'sp_std','ty':8,'name':'Ord','desc':'Trait for types that form a total order.','p':'sp_std::cmp'},{'crate':'sp_std','ty':8,'name':'PartialOrd','desc':'Trait for values that can be compared for a sort-order.','p':'sp_std::cmp'}],"..=":[{'crate':'sp_std','ty':3,'name':'RangeInclusive','desc':'A range bounded inclusively below and above (`start..=end`).','p':'sp_std::ops'},{'crate':'sp_std','ty':3,'name':'RangeToInclusive','desc':'A range only bounded inclusively above (`..=end`).','p':'sp_std::ops'}],"^=":[{'crate':'sp_std','ty':8,'name':'BitXorAssign','desc':'The bitwise XOR assignment operator `^=`.','p':'sp_std::ops'}],">":[{'crate':'sp_std','ty':8,'name':'Ord','desc':'Trait for types that form a total order.','p':'sp_std::cmp'},{'crate':'sp_std','ty':8,'name':'PartialOrd','desc':'Trait for values that can be compared for a sort-order.','p':'sp_std::cmp'}],"<=":[{'crate':'sp_std','ty':8,'name':'Ord','desc':'Trait for types that form a total order.','p':'sp_std::cmp'},{'crate':'sp_std','ty':8,'name':'PartialOrd','desc':'Trait for values that can be compared for a sort-order.','p':'sp_std::cmp'}],"^":[{'crate':'sp_std','ty':8,'name':'BitXor','desc':'The bitwise XOR operator `^`.','p':'sp_std::ops'}],"&=":[{'crate':'sp_std','ty':8,'name':'BitAndAssign','desc':'The bitwise AND assignment operator `&=`.','p':'sp_std::ops'}],"[]":[{'crate':'sp_std','ty':8,'name':'Index','desc':'Used for indexing operations (`container[index]`) in…','p':'sp_std::ops'},{'crate':'sp_std','ty':8,'name':'IndexMut','desc':'Used for indexing operations (`container[index]`) in…','p':'sp_std::ops'}],"+":[{'crate':'sp_std','ty':8,'name':'Add','desc':'The addition operator `+`.','p':'sp_std::ops'},{'crate':'sp_std','ty':8,'name':'AddAssign','desc':'The addition assignment operator `+=`.','p':'sp_std::ops'}],"%":[{'crate':'sp_std','ty':8,'name':'Rem','desc':'The remainder operator `%`.','p':'sp_std::ops'},{'crate':'sp_std','ty':8,'name':'RemAssign','desc':'The remainder assignment operator `%=`.','p':'sp_std::ops'}],">>=":[{'crate':'sp_std','ty':8,'name':'ShrAssign','desc':'The right shift assignment operator `>>=`.','p':'sp_std::ops'}],"/":[{'crate':'sp_std','ty':8,'name':'Div','desc':'The division operator `/`.','p':'sp_std::ops'},{'crate':'sp_std','ty':8,'name':'DivAssign','desc':'The division assignment operator `/=`.','p':'sp_std::ops'}],"[":[{'crate':'sp_std','ty':8,'name':'Index','desc':'Used for indexing operations (`container[index]`) in…','p':'sp_std::ops'},{'crate':'sp_std','ty':8,'name':'IndexMut','desc':'Used for indexing operations (`container[index]`) in…','p':'sp_std::ops'}],"..":[{'crate':'sp_std','ty':3,'name':'Range','desc':'A (half-open) range bounded inclusively below and…','p':'sp_std::ops'},{'crate':'sp_std','ty':3,'name':'RangeFrom','desc':'A range only bounded inclusively below (`start..`).','p':'sp_std::ops'},{'crate':'sp_std','ty':3,'name':'RangeFull','desc':'An unbounded range (`..`).','p':'sp_std::ops'},{'crate':'sp_std','ty':3,'name':'RangeTo','desc':'A range only bounded exclusively above (`..end`).','p':'sp_std::ops'}],"<<":[{'crate':'sp_std','ty':8,'name':'Shl','desc':'The left shift operator `<<`. Note that because this trait…','p':'sp_std::ops'}],"{}":[{'crate':'sp_std','ty':8,'name':'Display','desc':'Format trait for an empty format, `{}`.','p':'sp_std::fmt'}],"<":[{'crate':'sp_std','ty':8,'name':'Ord','desc':'Trait for types that form a total order.','p':'sp_std::cmp'},{'crate':'sp_std','ty':8,'name':'PartialOrd','desc':'Trait for values that can be compared for a sort-order.','p':'sp_std::cmp'}],"*=":[{'crate':'sp_std','ty':8,'name':'MulAssign','desc':'The multiplication assignment operator `*=`.','p':'sp_std::ops'}],"&":[{'crate':'sp_std','ty':8,'name':'BitAnd','desc':'The bitwise AND operator `&`.','p':'sp_std::ops'}],"|=":[{'crate':'sp_std','ty':8,'name':'BitOrAssign','desc':'The bitwise OR assignment operator `|=`.','p':'sp_std::ops'}],"|":[{'crate':'sp_std','ty':8,'name':'BitOr','desc':'The bitwise OR operator `|`.','p':'sp_std::ops'}],"&*":[{'crate':'sp_std','ty':8,'name':'Deref','desc':'Used for immutable dereferencing operations, like `*v`.','p':'sp_std::ops'}],">>":[{'crate':'sp_std','ty':8,'name':'Shr','desc':'The right shift operator `>>`. Note that because this…','p':'sp_std::ops'}],"-=":[{'crate':'sp_std','ty':8,'name':'SubAssign','desc':'The subtraction assignment operator `-=`.','p':'sp_std::ops'}],"==":[{'crate':'sp_std','ty':8,'name':'PartialEq','desc':'Trait for equality comparisons which are partial…','p':'sp_std::cmp'},{'crate':'sp_std','ty':8,'name':'Eq','desc':'Trait for equality comparisons which are equivalence…','p':'sp_std::cmp'},{'crate':'sp_std','ty':8,'name':'Eq','desc':'Trait for equality comparisons which are equivalence…','p':'sp_std::prelude'},{'crate':'sp_std','ty':8,'name':'PartialEq','desc':'Trait for equality comparisons which are partial…','p':'sp_std::prelude'}],"!=":[{'crate':'sp_std','ty':8,'name':'PartialEq','desc':'Trait for equality comparisons which are partial…','p':'sp_std::cmp'},{'crate':'sp_std','ty':8,'name':'Eq','desc':'Trait for equality comparisons which are equivalence…','p':'sp_std::cmp'},{'crate':'sp_std','ty':8,'name':'Eq','desc':'Trait for equality comparisons which are equivalence…','p':'sp_std::prelude'},{'crate':'sp_std','ty':8,'name':'PartialEq','desc':'Trait for equality comparisons which are partial…','p':'sp_std::prelude'}],"-":[{'crate':'sp_std','ty':8,'name':'Neg','desc':'The unary negation operator `-`.','p':'sp_std::ops'},{'crate':'sp_std','ty':8,'name':'Sub','desc':'The subtraction operator `-`.','p':'sp_std::ops'},{'crate':'sp_std','ty':8,'name':'SubAssign','desc':'The subtraction assignment operator `-=`.','p':'sp_std::ops'}],"+=":[{'crate':'sp_std','ty':8,'name':'AddAssign','desc':'The addition assignment operator `+=`.','p':'sp_std::ops'}],"<<=":[{'crate':'sp_std','ty':8,'name':'ShlAssign','desc':'The left shift assignment operator `<<=`.','p':'sp_std::ops'}],"{:?}":[{'crate':'sp_std','ty':8,'name':'Debug','desc':'`?` formatting.','p':'sp_std::fmt'}],"%=":[{'crate':'sp_std','ty':8,'name':'RemAssign','desc':'The remainder assignment operator `%=`.','p':'sp_std::ops'}],"/=":[{'crate':'sp_std','ty':8,'name':'DivAssign','desc':'The division assignment operator `/=`.','p':'sp_std::ops'}],"]":[{'crate':'sp_std','ty':8,'name':'Index','desc':'Used for indexing operations (`container[index]`) in…','p':'sp_std::ops'},{'crate':'sp_std','ty':8,'name':'IndexMut','desc':'Used for indexing operations (`container[index]`) in…','p':'sp_std::ops'}],};
ALIASES["sp_storage"] = {};
ALIASES["sp_test_primitives"] = {};
ALIASES["sp_timestamp"] = {};
ALIASES["sp_tracing"] = {};
ALIASES["sp_transaction_pool"] = {};
ALIASES["sp_trie"] = {};
ALIASES["sp_utils"] = {};
ALIASES["sp_version"] = {};
ALIASES["sp_wasm_interface"] = {};
ALIASES["spin"] = {};
ALIASES["stable_deref_trait"] = {};
ALIASES["static_assertions"] = {};
ALIASES["statrs"] = {};
ALIASES["stream_cipher"] = {};
ALIASES["string"] = {};
ALIASES["string_interner"] = {};
ALIASES["strsim"] = {};
ALIASES["structopt"] = {};
ALIASES["structopt_derive"] = {};
ALIASES["strum"] = {};
ALIASES["strum_macros"] = {};
ALIASES["subkey"] = {};
ALIASES["submit_solution"] = {};
ALIASES["substrate"] = {};
ALIASES["substrate_bip39"] = {};
ALIASES["substrate_browser_utils"] = {};
ALIASES["substrate_build_script_utils"] = {};
ALIASES["substrate_frame_rpc_support"] = {};
ALIASES["substrate_frame_rpc_system"] = {};
ALIASES["substrate_prometheus_endpoint"] = {};
ALIASES["substrate_test_client"] = {};
ALIASES["substrate_test_runtime"] = {};
ALIASES["substrate_test_runtime_client"] = {};
ALIASES["substrate_test_runtime_transaction_pool"] = {};
ALIASES["substrate_test_utils"] = {};
ALIASES["substrate_wasm_builder"] = {};
ALIASES["substrate_wasm_builder_runner"] = {};
ALIASES["substrate_wasmtime"] = {};
ALIASES["substrate_wasmtime_jit"] = {};
ALIASES["substrate_wasmtime_profiling"] = {};
ALIASES["substrate_wasmtime_runtime"] = {};
ALIASES["subtle"] = {};
ALIASES["syn"] = {};
ALIASES["syn_mid"] = {};
ALIASES["synstructure"] = {};
ALIASES["sysinfo"] = {};
ALIASES["take_mut"] = {};
ALIASES["target_lexicon"] = {};
ALIASES["tempfile"] = {};
ALIASES["termcolor"] = {};
ALIASES["textwrap"] = {};
ALIASES["thiserror"] = {};
ALIASES["thiserror_impl"] = {};
ALIASES["thread_local"] = {};
ALIASES["threadpool"] = {};
ALIASES["time"] = {};
ALIASES["tiny_keccak"] = {};
ALIASES["tokio"] = {};
ALIASES["tokio_buf"] = {};
ALIASES["tokio_codec"] = {};
ALIASES["tokio_current_thread"] = {};
ALIASES["tokio_executor"] = {};
ALIASES["tokio_fs"] = {};
ALIASES["tokio_io"] = {};
ALIASES["tokio_macros"] = {};
ALIASES["tokio_reactor"] = {};
ALIASES["tokio_rustls"] = {};
ALIASES["tokio_sync"] = {};
ALIASES["tokio_tcp"] = {};
ALIASES["tokio_threadpool"] = {};
ALIASES["tokio_timer"] = {};
ALIASES["tokio_udp"] = {};
ALIASES["tokio_uds"] = {};
ALIASES["tokio_util"] = {};
ALIASES["toml"] = {};
ALIASES["tower_service"] = {};
ALIASES["tracing"] = {};
ALIASES["tracing_attributes"] = {};
ALIASES["tracing_core"] = {};
ALIASES["trie_db"] = {};
ALIASES["trie_root"] = {};
ALIASES["try_lock"] = {};
ALIASES["trybuild"] = {};
ALIASES["twofish"] = {};
ALIASES["twox_hash"] = {};
ALIASES["typenum"] = {};
ALIASES["uint"] = {};
ALIASES["unicase"] = {};
ALIASES["unicode_bidi"] = {};
ALIASES["unicode_normalization"] = {};
ALIASES["unicode_segmentation"] = {};
ALIASES["unicode_width"] = {};
ALIASES["unicode_xid"] = {};
ALIASES["unsigned_varint"] = {};
ALIASES["untrusted"] = {};
ALIASES["url"] = {};
ALIASES["vec_map"] = {};
ALIASES["void"] = {};
ALIASES["wabt"] = {};
ALIASES["wabt_sys"] = {};
ALIASES["walkdir"] = {};
ALIASES["want"] = {};
ALIASES["wasm_bindgen"] = {};
ALIASES["wasm_bindgen_backend"] = {};
ALIASES["wasm_bindgen_futures"] = {};
ALIASES["wasm_bindgen_macro"] = {};
ALIASES["wasm_bindgen_macro_support"] = {};
ALIASES["wasm_bindgen_shared"] = {};
ALIASES["wasm_bindgen_test"] = {};
ALIASES["wasm_bindgen_test_macro"] = {};
ALIASES["wasm_gc"] = {};
ALIASES["wasm_timer"] = {};
ALIASES["wasmi"] = {};
ALIASES["wasmi_validation"] = {};
ALIASES["wasmparser"] = {};
ALIASES["wasmtime_debug"] = {};
ALIASES["wasmtime_environ"] = {};
ALIASES["wast"] = {};
ALIASES["wat"] = {};
ALIASES["web_sys"] = {};
ALIASES["webpki"] = {};
ALIASES["webpki_roots"] = {};
ALIASES["ws"] = {};
ALIASES["x25519_dalek"] = {};
ALIASES["xdg"] = {};
ALIASES["yamux"] = {};
ALIASES["zeroize"] = {};
ALIASES["zeroize_derive"] = {};
ALIASES["zstd"] = {};
ALIASES["zstd_safe"] = {};
ALIASES["zstd_sys"] = {};
