(function() {var implementors = {};
implementors["futures_codec"] = [{"text":"impl&lt;T, U&gt; PinnedDrop for <a class=\"struct\" href=\"futures_codec/struct.Framed.html\" title=\"struct futures_codec::Framed\">Framed</a>&lt;T, U&gt;","synthetic":false,"types":["futures_codec::framed::Framed"]},{"text":"impl&lt;T, E&gt; PinnedDrop for <a class=\"struct\" href=\"futures_codec/struct.FramedWrite.html\" title=\"struct futures_codec::FramedWrite\">FramedWrite</a>&lt;T, E&gt;","synthetic":false,"types":["futures_codec::framed_write::FramedWrite"]}];
implementors["futures_diagnose"] = [{"text":"impl&lt;T&gt; PinnedDrop for <a class=\"struct\" href=\"futures_diagnose/struct.DiagnoseFuture.html\" title=\"struct futures_diagnose::DiagnoseFuture\">DiagnoseFuture</a>&lt;T&gt;","synthetic":false,"types":["futures_diagnose::fut_with_diag::DiagnoseFuture"]}];
implementors["hyper"] = [{"text":"impl&lt;I, F, E&gt; PinnedDrop for <a class=\"struct\" href=\"hyper/server/conn/struct.Connecting.html\" title=\"struct hyper::server::conn::Connecting\">Connecting</a>&lt;I, F, E&gt;","synthetic":false,"types":["hyper::server::conn::Connecting"]},{"text":"impl&lt;T, S, E&gt; PinnedDrop for <a class=\"struct\" href=\"hyper/server/conn/struct.Connection.html\" title=\"struct hyper::server::conn::Connection\">Connection</a>&lt;T, S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: HttpService&lt;<a class=\"struct\" href=\"hyper/struct.Body.html\" title=\"struct hyper::Body\">Body</a>&gt;,&nbsp;</span>","synthetic":false,"types":["hyper::server::conn::Connection"]},{"text":"impl&lt;I, S, E&gt; PinnedDrop for <a class=\"struct\" href=\"hyper/server/struct.Server.html\" title=\"struct hyper::server::Server\">Server</a>&lt;I, S, E&gt;","synthetic":false,"types":["hyper::server::Server"]}];
implementors["libp2p"] = [{"text":"impl&lt;TInner&gt; PinnedDrop for <a class=\"struct\" href=\"libp2p/bandwidth/struct.BandwidthListener.html\" title=\"struct libp2p::bandwidth::BandwidthListener\">BandwidthListener</a>&lt;TInner&gt;","synthetic":false,"types":["libp2p::bandwidth::BandwidthListener"]},{"text":"impl&lt;TInner&gt; PinnedDrop for <a class=\"struct\" href=\"libp2p/bandwidth/struct.BandwidthFuture.html\" title=\"struct libp2p::bandwidth::BandwidthFuture\">BandwidthFuture</a>&lt;TInner&gt;","synthetic":false,"types":["libp2p::bandwidth::BandwidthFuture"]},{"text":"impl&lt;TInner&gt; PinnedDrop for <a class=\"struct\" href=\"libp2p/bandwidth/struct.BandwidthConnecLogging.html\" title=\"struct libp2p::bandwidth::BandwidthConnecLogging\">BandwidthConnecLogging</a>&lt;TInner&gt;","synthetic":false,"types":["libp2p::bandwidth::BandwidthConnecLogging"]}];
implementors["libp2p_core"] = [{"text":"impl&lt;A, B&gt; PinnedDrop for <a class=\"enum\" href=\"libp2p_core/either/enum.EitherOutput.html\" title=\"enum libp2p_core::either::EitherOutput\">EitherOutput</a>&lt;A, B&gt;","synthetic":false,"types":["libp2p_core::either::EitherOutput"]},{"text":"impl&lt;A, B&gt; PinnedDrop for <a class=\"enum\" href=\"libp2p_core/either/enum.EitherListenStream.html\" title=\"enum libp2p_core::either::EitherListenStream\">EitherListenStream</a>&lt;A, B&gt;","synthetic":false,"types":["libp2p_core::either::EitherListenStream"]},{"text":"impl&lt;A, B&gt; PinnedDrop for <a class=\"enum\" href=\"libp2p_core/either/enum.EitherFuture.html\" title=\"enum libp2p_core::either::EitherFuture\">EitherFuture</a>&lt;A, B&gt;","synthetic":false,"types":["libp2p_core::either::EitherFuture"]},{"text":"impl&lt;A, B&gt; PinnedDrop for <a class=\"enum\" href=\"libp2p_core/either/enum.EitherFuture2.html\" title=\"enum libp2p_core::either::EitherFuture2\">EitherFuture2</a>&lt;A, B&gt;","synthetic":false,"types":["libp2p_core::either::EitherFuture2"]},{"text":"impl&lt;TListener, TMap&gt; PinnedDrop for <a class=\"struct\" href=\"libp2p_core/transport/and_then/struct.AndThenStream.html\" title=\"struct libp2p_core::transport::and_then::AndThenStream\">AndThenStream</a>&lt;TListener, TMap&gt;","synthetic":false,"types":["libp2p_core::transport::and_then::AndThenStream"]},{"text":"impl&lt;T, F&gt; PinnedDrop for <a class=\"struct\" href=\"libp2p_core/transport/map/struct.MapStream.html\" title=\"struct libp2p_core::transport::map::MapStream\">MapStream</a>&lt;T, F&gt;","synthetic":false,"types":["libp2p_core::transport::map::MapStream"]},{"text":"impl&lt;T, F&gt; PinnedDrop for <a class=\"struct\" href=\"libp2p_core/transport/map/struct.MapFuture.html\" title=\"struct libp2p_core::transport::map::MapFuture\">MapFuture</a>&lt;T, F&gt;","synthetic":false,"types":["libp2p_core::transport::map::MapFuture"]},{"text":"impl&lt;T:&nbsp;<a class=\"trait\" href=\"libp2p_core/transport/trait.Transport.html\" title=\"trait libp2p_core::transport::Transport\">Transport</a>, F&gt; PinnedDrop for <a class=\"struct\" href=\"libp2p_core/transport/map_err/struct.MapErrListener.html\" title=\"struct libp2p_core::transport::map_err::MapErrListener\">MapErrListener</a>&lt;T, F&gt;","synthetic":false,"types":["libp2p_core::transport::map_err::MapErrListener"]},{"text":"impl&lt;T:&nbsp;<a class=\"trait\" href=\"libp2p_core/transport/trait.Transport.html\" title=\"trait libp2p_core::transport::Transport\">Transport</a>, F&gt; PinnedDrop for <a class=\"struct\" href=\"libp2p_core/transport/map_err/struct.MapErrListenerUpgrade.html\" title=\"struct libp2p_core::transport::map_err::MapErrListenerUpgrade\">MapErrListenerUpgrade</a>&lt;T, F&gt;","synthetic":false,"types":["libp2p_core::transport::map_err::MapErrListenerUpgrade"]},{"text":"impl&lt;T:&nbsp;<a class=\"trait\" href=\"libp2p_core/transport/trait.Transport.html\" title=\"trait libp2p_core::transport::Transport\">Transport</a>, F&gt; PinnedDrop for <a class=\"struct\" href=\"libp2p_core/transport/map_err/struct.MapErrDial.html\" title=\"struct libp2p_core::transport::map_err::MapErrDial\">MapErrDial</a>&lt;T, F&gt;","synthetic":false,"types":["libp2p_core::transport::map_err::MapErrDial"]},{"text":"impl&lt;InnerStream&gt; PinnedDrop for <a class=\"struct\" href=\"libp2p_core/transport/timeout/struct.TimeoutListener.html\" title=\"struct libp2p_core::transport::timeout::TimeoutListener\">TimeoutListener</a>&lt;InnerStream&gt;","synthetic":false,"types":["libp2p_core::transport::timeout::TimeoutListener"]},{"text":"impl&lt;InnerFut&gt; PinnedDrop for <a class=\"struct\" href=\"libp2p_core/transport/timeout/struct.Timeout.html\" title=\"struct libp2p_core::transport::timeout::Timeout\">Timeout</a>&lt;InnerFut&gt;","synthetic":false,"types":["libp2p_core::transport::timeout::Timeout"]},{"text":"impl&lt;C, U&gt; PinnedDrop for <a class=\"struct\" href=\"libp2p_core/transport/upgrade/struct.Authenticate.html\" title=\"struct libp2p_core::transport::upgrade::Authenticate\">Authenticate</a>&lt;C, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: <a class=\"trait\" href=\"futures_io/if_std/trait.AsyncRead.html\" title=\"trait futures_io::if_std::AsyncRead\">AsyncRead</a> + <a class=\"trait\" href=\"futures_io/if_std/trait.AsyncWrite.html\" title=\"trait futures_io::if_std::AsyncWrite\">AsyncWrite</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Unpin.html\" title=\"trait core::marker::Unpin\">Unpin</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: <a class=\"trait\" href=\"libp2p_core/upgrade/trait.InboundUpgrade.html\" title=\"trait libp2p_core::upgrade::InboundUpgrade\">InboundUpgrade</a>&lt;<a class=\"type\" href=\"libp2p_core/type.Negotiated.html\" title=\"type libp2p_core::Negotiated\">Negotiated</a>&lt;C&gt;&gt; + <a class=\"trait\" href=\"libp2p_core/upgrade/trait.OutboundUpgrade.html\" title=\"trait libp2p_core::upgrade::OutboundUpgrade\">OutboundUpgrade</a>&lt;<a class=\"type\" href=\"libp2p_core/type.Negotiated.html\" title=\"type libp2p_core::Negotiated\">Negotiated</a>&lt;C&gt;&gt;,&nbsp;</span>","synthetic":false,"types":["libp2p_core::transport::upgrade::Authenticate"]},{"text":"impl&lt;C, U, I&gt; PinnedDrop for <a class=\"struct\" href=\"libp2p_core/transport/upgrade/struct.Multiplex.html\" title=\"struct libp2p_core::transport::upgrade::Multiplex\">Multiplex</a>&lt;C, U, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: <a class=\"trait\" href=\"futures_io/if_std/trait.AsyncRead.html\" title=\"trait futures_io::if_std::AsyncRead\">AsyncRead</a> + <a class=\"trait\" href=\"futures_io/if_std/trait.AsyncWrite.html\" title=\"trait futures_io::if_std::AsyncWrite\">AsyncWrite</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Unpin.html\" title=\"trait core::marker::Unpin\">Unpin</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: <a class=\"trait\" href=\"libp2p_core/upgrade/trait.InboundUpgrade.html\" title=\"trait libp2p_core::upgrade::InboundUpgrade\">InboundUpgrade</a>&lt;<a class=\"type\" href=\"libp2p_core/type.Negotiated.html\" title=\"type libp2p_core::Negotiated\">Negotiated</a>&lt;C&gt;&gt; + <a class=\"trait\" href=\"libp2p_core/upgrade/trait.OutboundUpgrade.html\" title=\"trait libp2p_core::upgrade::OutboundUpgrade\">OutboundUpgrade</a>&lt;<a class=\"type\" href=\"libp2p_core/type.Negotiated.html\" title=\"type libp2p_core::Negotiated\">Negotiated</a>&lt;C&gt;&gt;,&nbsp;</span>","synthetic":false,"types":["libp2p_core::transport::upgrade::Multiplex"]}];
implementors["multistream_select"] = [{"text":"impl&lt;R, N&gt; PinnedDrop for <a class=\"struct\" href=\"multistream_select/struct.ListenerSelectFuture.html\" title=\"struct multistream_select::ListenerSelectFuture\">ListenerSelectFuture</a>&lt;R, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: <a class=\"trait\" href=\"futures_io/if_std/trait.AsyncRead.html\" title=\"trait futures_io::if_std::AsyncRead\">AsyncRead</a> + <a class=\"trait\" href=\"futures_io/if_std/trait.AsyncWrite.html\" title=\"trait futures_io::if_std::AsyncWrite\">AsyncWrite</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[</a><a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a><a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">]</a>&gt;,&nbsp;</span>","synthetic":false,"types":["multistream_select::listener_select::ListenerSelectFuture"]},{"text":"impl&lt;TInner&gt; PinnedDrop for <a class=\"struct\" href=\"multistream_select/struct.Negotiated.html\" title=\"struct multistream_select::Negotiated\">Negotiated</a>&lt;TInner&gt;","synthetic":false,"types":["multistream_select::negotiated::Negotiated"]}];
implementors["rw_stream_sink"] = [{"text":"impl&lt;S:&nbsp;<a class=\"trait\" href=\"futures_core/stream/trait.TryStream.html\" title=\"trait futures_core::stream::TryStream\">TryStream</a>&gt; PinnedDrop for <a class=\"struct\" href=\"rw_stream_sink/struct.RwStreamSink.html\" title=\"struct rw_stream_sink::RwStreamSink\">RwStreamSink</a>&lt;S&gt;","synthetic":false,"types":["rw_stream_sink::RwStreamSink"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()